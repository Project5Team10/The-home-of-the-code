
STM32F407VE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003678  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003828  08003828  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003830  08003830  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000028c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c1a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b15  00000000  00000000  00029c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  0002b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c8  00000000  00000000  0002c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202d6  00000000  00000000  0002c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009edc  00000000  00000000  0004caae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1342  00000000  00000000  0005698a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00117ccc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f0  00000000  00000000  00117d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037e8 	.word	0x080037e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037e8 	.word	0x080037e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	u8 key_up=1,canbuf[32];
 80004c6:	2301      	movs	r3, #1
 80004c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc24 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f8e0 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa10 	bl	80008f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004d8:	f000 f93a 	bl	8000750 <MX_CAN1_Init>
  MX_CAN2_Init();
 80004dc:	f000 f96c 	bl	80007b8 <MX_CAN2_Init>
  MX_SPI1_Init();
 80004e0:	f000 f99e 	bl	8000820 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004e4:	f000 f9d2 	bl	800088c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	LED0=0;
 80004e8:	4b65      	ldr	r3, [pc, #404]	; (8000680 <main+0x1c0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
	LED1=0;
 80004ee:	4b65      	ldr	r3, [pc, #404]	; (8000684 <main+0x1c4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
	LED2=0;
 80004f4:	4b64      	ldr	r3, [pc, #400]	; (8000688 <main+0x1c8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
	LED3=0;
 80004fa:	4b64      	ldr	r3, [pc, #400]	; (800068c <main+0x1cc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]

	NRF24L01_Init();    		    //初始化NRF24L01
 8000500:	f002 fd36 	bl	8002f70 <NRF24L01_Init>
	NRF24L01_2_Init();    		    //初始化NRF24L01
 8000504:	f002 fd98 	bl	8003038 <NRF24L01_2_Init>
	while(NRF24L01_Check())
 8000508:	e005      	b.n	8000516 <main+0x56>
	{
		LED0=0;
 800050a:	4b5d      	ldr	r3, [pc, #372]	; (8000680 <main+0x1c0>)
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
		LED1=0;
 8000510:	4b5c      	ldr	r3, [pc, #368]	; (8000684 <main+0x1c4>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	while(NRF24L01_Check())
 8000516:	f002 fddf 	bl	80030d8 <NRF24L01_Check>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f4      	bne.n	800050a <main+0x4a>
	}
	LED0=1;
 8000520:	4b57      	ldr	r3, [pc, #348]	; (8000680 <main+0x1c0>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
	LED1=1;
 8000526:	4b57      	ldr	r3, [pc, #348]	; (8000684 <main+0x1c4>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
	while(NRF24L01_2_Check())
 800052c:	e005      	b.n	800053a <main+0x7a>
	{

		LED2=0;
 800052e:	4b56      	ldr	r3, [pc, #344]	; (8000688 <main+0x1c8>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
		LED3=0;
 8000534:	4b55      	ldr	r3, [pc, #340]	; (800068c <main+0x1cc>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	while(NRF24L01_2_Check())
 800053a:	f002 fe05 	bl	8003148 <NRF24L01_2_Check>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1f4      	bne.n	800052e <main+0x6e>
	}
	LED2=1;
 8000544:	4b50      	ldr	r3, [pc, #320]	; (8000688 <main+0x1c8>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
	LED3=1;
 800054a:	4b50      	ldr	r3, [pc, #320]	; (800068c <main+0x1cc>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
	NRF24L01_RX_Mode();
 8000550:	f002 ffc0 	bl	80034d4 <NRF24L01_RX_Mode>
	NRF24L01_2_TX_Mode();
 8000554:	f002 ffea 	bl	800352c <NRF24L01_2_TX_Mode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	CAN1_Mode_Init(CAN_SJW_1TQ,CAN_BS2_6TQ,CAN_BS1_7TQ,6,CAN_MODE_NORMAL);
 8000558:	2300      	movs	r3, #0
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2306      	movs	r3, #6
 800055e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000562:	f44f 01a0 	mov.w	r1, #5242880	; 0x500000
 8000566:	2000      	movs	r0, #0
 8000568:	f002 faa2 	bl	8002ab0 <CAN1_Mode_Init>
	CAN_Config();
 800056c:	f002 fb2c 	bl	8002bc8 <CAN_Config>
	CAN2_Mode_Init(CAN_SJW_1TQ,CAN_BS2_6TQ,CAN_BS1_7TQ,6,CAN_MODE_NORMAL);
 8000570:	2300      	movs	r3, #0
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2306      	movs	r3, #6
 8000576:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800057a:	f44f 01a0 	mov.w	r1, #5242880	; 0x500000
 800057e:	2000      	movs	r0, #0
 8000580:	f002 fadc 	bl	8002b3c <CAN2_Mode_Init>
	CAN2_Config();
 8000584:	f002 fb6a 	bl	8002c5c <CAN2_Config>
  while (1)
  {
		if(NRF24L01_RxPacket(canbuf)==0)//无线收到后，用can2发送
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f002 ff7c 	bl	8003488 <NRF24L01_RxPacket>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d109      	bne.n	80005aa <main+0xea>
		{
			if(canbuf[0]==1)
 8000596:	793b      	ldrb	r3, [r7, #4]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d106      	bne.n	80005aa <main+0xea>
			{
				canbuf[0]=1;
 800059c:	2301      	movs	r3, #1
 800059e:	713b      	strb	r3, [r7, #4]
				CAN2_Send_Msg(canbuf,1);//用can2发送
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fbeb 	bl	8002d80 <CAN2_Send_Msg>
			}

		}
		if(CAN1_Receive_Msg(canbuf)==1)//can2接收到后，用无线发送
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fc2f 	bl	8002e10 <CAN1_Receive_Msg>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d128      	bne.n	800060a <main+0x14a>
		{
			if(canbuf[0]==1)
 80005b8:	793b      	ldrb	r3, [r7, #4]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d125      	bne.n	800060a <main+0x14a>
			{
				canbuf[0]=0;
 80005be:	2300      	movs	r3, #0
 80005c0:	713b      	strb	r3, [r7, #4]
				LED0=!LED0;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <main+0x1c0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <main+0x1c0>)
 80005d2:	601a      	str	r2, [r3, #0]
				LED1=!LED1;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <main+0x1c4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <main+0x1c4>)
 80005e4:	601a      	str	r2, [r3, #0]
				LED2=!LED2;
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <main+0x1c8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <main+0x1c8>)
 80005f6:	601a      	str	r2, [r3, #0]
				LED3=!LED3;
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <main+0x1cc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <main+0x1cc>)
 8000608:	601a      	str	r2, [r3, #0]
			}
		}
		if(CAN2_Receive_Msg(canbuf)==1)//can2接收到后，用无线发送
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fc37 	bl	8002e80 <CAN2_Receive_Msg>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d108      	bne.n	800062a <main+0x16a>
		{
			if(canbuf[0]==1)
 8000618:	793b      	ldrb	r3, [r7, #4]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d105      	bne.n	800062a <main+0x16a>
			{
				canbuf[0]=1;
 800061e:	2301      	movs	r3, #1
 8000620:	713b      	strb	r3, [r7, #4]
				if(NRF24L01_2_TxPacket(canbuf)==TX_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fef3 	bl	8003410 <NRF24L01_2_TxPacket>
				{

				}
			}
		}
		if(WK_UP==1&&key_up==1)
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <main+0x1d0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d119      	bne.n	8000666 <main+0x1a6>
 8000632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000636:	2b01      	cmp	r3, #1
 8000638:	d115      	bne.n	8000666 <main+0x1a6>
		{
			HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fbde 	bl	8000dfc <HAL_Delay>
			if(WK_UP==1&&key_up==1)//按键按下后，用can1发送
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <main+0x1d0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d116      	bne.n	8000676 <main+0x1b6>
 8000648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800064c:	2b01      	cmp	r3, #1
 800064e:	d112      	bne.n	8000676 <main+0x1b6>
			{
				key_up=0;
 8000650:	2300      	movs	r3, #0
 8000652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				canbuf[0]=1;
 8000656:	2301      	movs	r3, #1
 8000658:	713b      	strb	r3, [r7, #4]
				CAN1_Send_Msg(canbuf,1);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fb46 	bl	8002cf0 <CAN1_Send_Msg>
			if(WK_UP==1&&key_up==1)//按键按下后，用can1发送
 8000664:	e007      	b.n	8000676 <main+0x1b6>

			}
		}
		else if(WK_UP==0)
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <main+0x1d0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d104      	bne.n	8000678 <main+0x1b8>
		{
			key_up=1;
 800066e:	2301      	movs	r3, #1
 8000670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000674:	e000      	b.n	8000678 <main+0x1b8>
			if(WK_UP==1&&key_up==1)//按键按下后，用can1发送
 8000676:	bf00      	nop
		}
		HAL_Delay(50);
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f000 fbbf 	bl	8000dfc <HAL_Delay>
		if(NRF24L01_RxPacket(canbuf)==0)//无线收到后，用can2发送
 800067e:	e783      	b.n	8000588 <main+0xc8>
 8000680:	424182b0 	.word	0x424182b0
 8000684:	424182b4 	.word	0x424182b4
 8000688:	424182b8 	.word	0x424182b8
 800068c:	424182bc 	.word	0x424182bc
 8000690:	42400200 	.word	0x42400200

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 f898 	bl	80037d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xb4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xb4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xb4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <SystemClock_Config+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <SystemClock_Config+0xb8>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <SystemClock_Config+0xb8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fac9 	bl	8001c9c <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000710:	f000 f952 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fd2c 	bl	800218c <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073a:	f000 f93d 	bl	80009b8 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000758:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_CAN1_Init+0x60>)
 800075c:	2210      	movs	r2, #16
 800075e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_CAN1_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_CAN1_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_CAN1_Init+0x60>)
 800078c:	2200      	movs	r2, #0
 800078e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_CAN1_Init+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_CAN1_Init+0x60>)
 800079e:	f000 fb51 	bl	8000e44 <HAL_CAN_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f906 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000104 	.word	0x20000104
 80007b4:	40006400 	.word	0x40006400

080007b8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_CAN2_Init+0x60>)
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_CAN2_Init+0x64>)
 80007c0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_CAN2_Init+0x60>)
 80007c4:	2210      	movs	r2, #16
 80007c6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_CAN2_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_CAN2_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_CAN2_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_CAN2_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_CAN2_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_CAN2_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_CAN2_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_CAN2_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_CAN2_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_CAN2_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_CAN2_Init+0x60>)
 8000806:	f000 fb1d 	bl	8000e44 <HAL_CAN_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f8d2 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000084 	.word	0x20000084
 800081c:	40006800 	.word	0x40006800

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_SPI1_Init+0x64>)
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <MX_SPI1_Init+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_SPI1_Init+0x64>)
 800082c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_SPI1_Init+0x64>)
 800084c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000850:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_SPI1_Init+0x64>)
 800086c:	220a      	movs	r2, #10
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_SPI1_Init+0x64>)
 8000872:	f001 fe27 	bl	80024c4 <HAL_SPI_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800087c:	f000 f89c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000ac 	.word	0x200000ac
 8000888:	40013000 	.word	0x40013000

0800088c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI2_Init+0x64>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_SPI2_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI2_Init+0x64>)
 8000898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800089c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008d8:	220a      	movs	r2, #10
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008de:	f001 fdf1 	bl	80024c4 <HAL_SPI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008e8:	f000 f866 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000002c 	.word	0x2000002c
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_GPIO_Init+0xb8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_GPIO_Init+0xb8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <MX_GPIO_Init+0xb8>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_GPIO_Init+0xb8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000986:	f001 f96f 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800098a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0xbc>)
 80009a4:	f000 ffc4 	bl	8001930 <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a42      	ldr	r2, [pc, #264]	; (8000b3c <HAL_CAN_MspInit+0x128>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d135      	bne.n	8000aa2 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a40      	ldr	r2, [pc, #256]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a40:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10d      	bne.n	8000a64 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a3c      	ldr	r2, [pc, #240]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a35      	ldr	r2, [pc, #212]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a90:	2309      	movs	r3, #9
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482b      	ldr	r0, [pc, #172]	; (8000b48 <HAL_CAN_MspInit+0x134>)
 8000a9c:	f000 ff48 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000aa0:	e048      	b.n	8000b34 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a29      	ldr	r2, [pc, #164]	; (8000b4c <HAL_CAN_MspInit+0x138>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d143      	bne.n	8000b34 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000ad0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10d      	bne.n	8000af6 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000b12:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b24:	2309      	movs	r3, #9
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4808      	ldr	r0, [pc, #32]	; (8000b50 <HAL_CAN_MspInit+0x13c>)
 8000b30:	f000 fefe 	bl	8001930 <HAL_GPIO_Init>
}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40006400 	.word	0x40006400
 8000b40:	20000028 	.word	0x20000028
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40006800 	.word	0x40006800
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <HAL_SPI_MspInit+0xe8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12c      	bne.n	8000bd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a30      	ldr	r2, [pc, #192]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bae:	2338      	movs	r3, #56	; 0x38
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481e      	ldr	r0, [pc, #120]	; (8000c44 <HAL_SPI_MspInit+0xf0>)
 8000bca:	f000 feb1 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bce:	e031      	b.n	8000c34 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <HAL_SPI_MspInit+0xf4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12c      	bne.n	8000c34 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_SPI_MspInit+0xec>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c24:	2305      	movs	r3, #5
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_SPI_MspInit+0xf0>)
 8000c30:	f000 fe7e 	bl	8001930 <HAL_GPIO_Init>
}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40003800 	.word	0x40003800

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f890 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffd7 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f002 fd4d 	bl	8003790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fbe3 	bl	80004c0 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d08:	08003838 	.word	0x08003838
  ldr r2, =_sbss
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d10:	20000298 	.word	0x20000298

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 fdc1 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fe3a 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fdcb 	bl	8001916 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 fda1 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	2000012c 	.word	0x2000012c

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000012c 	.word	0x2000012c

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0ed      	b.n	8001032 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fdd6 	bl	8000a14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0201 	orr.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e78:	f7ff ffb4 	bl	8000de4 <HAL_GetTick>
 8000e7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7e:	e012      	b.n	8000ea6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e80:	f7ff ffb0 	bl	8000de4 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b0a      	cmp	r3, #10
 8000e8c:	d90b      	bls.n	8000ea6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e0c5      	b.n	8001032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0e5      	beq.n	8000e80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0202 	bic.w	r2, r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec4:	f7ff ff8e 	bl	8000de4 <HAL_GetTick>
 8000ec8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eca:	e012      	b.n	8000ef2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ecc:	f7ff ff8a 	bl	8000de4 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b0a      	cmp	r3, #10
 8000ed8:	d90b      	bls.n	8000ef2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2205      	movs	r2, #5
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e09f      	b.n	8001032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e5      	bne.n	8000ecc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7e1b      	ldrb	r3, [r3, #24]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e007      	b.n	8000f2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e5b      	ldrb	r3, [r3, #25]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d108      	bne.n	8000f44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7e9b      	ldrb	r3, [r3, #26]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d108      	bne.n	8000f6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0220 	orr.w	r2, r2, #32
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e007      	b.n	8000f7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0220 	bic.w	r2, r2, #32
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7edb      	ldrb	r3, [r3, #27]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0210 	bic.w	r2, r2, #16
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0210 	orr.w	r2, r2, #16
 8000fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7f1b      	ldrb	r3, [r3, #28]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0208 	orr.w	r2, r2, #8
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e007      	b.n	8000fd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0208 	bic.w	r2, r2, #8
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7f5b      	ldrb	r3, [r3, #29]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 0204 	orr.w	r2, r2, #4
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0204 	bic.w	r2, r2, #4
 8000ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	ea42 0103 	orr.w	r1, r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001052:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001054:	7cfb      	ldrb	r3, [r7, #19]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d003      	beq.n	8001062 <HAL_CAN_ConfigFilter+0x26>
 800105a:	7cfb      	ldrb	r3, [r7, #19]
 800105c:	2b02      	cmp	r3, #2
 800105e:	f040 80be 	bne.w	80011de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001064:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800107c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	431a      	orrs	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2201      	movs	r2, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	401a      	ands	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d123      	bne.n	800110c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3248      	adds	r2, #72	; 0x48
 80010ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001100:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001102:	6979      	ldr	r1, [r7, #20]
 8001104:	3348      	adds	r3, #72	; 0x48
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d122      	bne.n	800115a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	431a      	orrs	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001134:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3248      	adds	r2, #72	; 0x48
 800113a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800114e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001150:	6979      	ldr	r1, [r7, #20]
 8001152:	3348      	adds	r3, #72	; 0x48
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	401a      	ands	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001174:	e007      	b.n	8001186 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	431a      	orrs	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	401a      	ands	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011a0:	e007      	b.n	80011b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d107      	bne.n	80011ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011d0:	f023 0201 	bic.w	r2, r3, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e006      	b.n	80011ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
  }
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40006400 	.word	0x40006400

080011fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d12e      	bne.n	800126e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2202      	movs	r2, #2
 8001214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fddc 	bl	8000de4 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800122e:	e012      	b.n	8001256 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001230:	f7ff fdd8 	bl	8000de4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d90b      	bls.n	8001256 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e012      	b.n	800127c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e5      	bne.n	8001230 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e006      	b.n	800127c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
  }
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d003      	beq.n	80012b0 <HAL_CAN_AddTxMessage+0x2c>
 80012a8:	7ffb      	ldrb	r3, [r7, #31]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	f040 80b8 	bne.w	8001420 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10a      	bne.n	80012d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d105      	bne.n	80012d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 80a0 	beq.w	8001410 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	0e1b      	lsrs	r3, r3, #24
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d907      	bls.n	80012f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e09e      	b.n	800142e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012f0:	2201      	movs	r2, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	409a      	lsls	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	6809      	ldr	r1, [r1, #0]
 8001310:	431a      	orrs	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3318      	adds	r3, #24
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	440b      	add	r3, r1
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e00f      	b.n	800133e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001328:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001332:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3318      	adds	r3, #24
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	440b      	add	r3, r1
 800133c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3318      	adds	r3, #24
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	440b      	add	r3, r1
 800134e:	3304      	adds	r3, #4
 8001350:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	7d1b      	ldrb	r3, [r3, #20]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d111      	bne.n	800137e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3318      	adds	r3, #24
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	4413      	add	r3, r2
 8001366:	3304      	adds	r3, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3318      	adds	r3, #24
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	440b      	add	r3, r1
 800137a:	3304      	adds	r3, #4
 800137c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3307      	adds	r3, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	061a      	lsls	r2, r3, #24
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3306      	adds	r3, #6
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3305      	adds	r3, #5
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4313      	orrs	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	3204      	adds	r2, #4
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	4610      	mov	r0, r2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	6811      	ldr	r1, [r2, #0]
 80013a6:	ea43 0200 	orr.w	r2, r3, r0
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	440b      	add	r3, r1
 80013b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3303      	adds	r3, #3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	061a      	lsls	r2, r3, #24
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3302      	adds	r3, #2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	4313      	orrs	r3, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	4610      	mov	r0, r2
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	6811      	ldr	r1, [r2, #0]
 80013dc:	ea43 0200 	orr.w	r2, r3, r0
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	440b      	add	r3, r1
 80013e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3318      	adds	r3, #24
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	6811      	ldr	r1, [r2, #0]
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3318      	adds	r3, #24
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	440b      	add	r3, r1
 800140a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	e00e      	b.n	800142e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e006      	b.n	800142e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
  }
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d002      	beq.n	800145a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d11d      	bne.n	8001496 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3301      	adds	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d003      	beq.n	80014c8 <HAL_CAN_GetRxMessage+0x24>
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	f040 80f3 	bne.w	80016ae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10e      	bne.n	80014ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d116      	bne.n	800150a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0e7      	b.n	80016bc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0d8      	b.n	80016bc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	331b      	adds	r3, #27
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0204 	and.w	r2, r3, #4
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10c      	bne.n	8001542 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	331b      	adds	r3, #27
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4413      	add	r3, r2
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0d5b      	lsrs	r3, r3, #21
 8001538:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e00b      	b.n	800155a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	331b      	adds	r3, #27
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	331b      	adds	r3, #27
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0202 	and.w	r2, r3, #2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	331b      	adds	r3, #27
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	4413      	add	r3, r2
 800157c:	3304      	adds	r3, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 020f 	and.w	r2, r3, #15
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	331b      	adds	r3, #27
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	3304      	adds	r3, #4
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	b2da      	uxtb	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	331b      	adds	r3, #27
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	3304      	adds	r3, #4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0c1b      	lsrs	r3, r3, #16
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0a1a      	lsrs	r2, r3, #8
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0c1a      	lsrs	r2, r3, #16
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3302      	adds	r3, #2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0e1a      	lsrs	r2, r3, #24
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3303      	adds	r3, #3
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4413      	add	r3, r2
 8001626:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	3304      	adds	r3, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0a1a      	lsrs	r2, r3, #8
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3305      	adds	r3, #5
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0c1a      	lsrs	r2, r3, #16
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	3306      	adds	r3, #6
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0e1a      	lsrs	r2, r3, #24
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	3307      	adds	r3, #7
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d108      	bne.n	800169a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0220 	orr.w	r2, r2, #32
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	e007      	b.n	80016aa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0220 	orr.w	r2, r2, #32
 80016a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e006      	b.n	80016bc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
  }
}
 80016bc:	4618      	mov	r0, r3
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016de:	7afb      	ldrb	r3, [r7, #11]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d002      	beq.n	80016ea <HAL_CAN_GetRxFifoFillLevel+0x22>
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d10f      	bne.n	800170a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e005      	b.n	800170a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001728:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d002      	beq.n	8001736 <HAL_CAN_ActivateNotification+0x1e>
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d109      	bne.n	800174a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6959      	ldr	r1, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e006      	b.n	8001758 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
  }
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	; (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff47 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff5c 	bl	80017ac <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff8e 	bl	800181c <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5d 	bl	80017c8 <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffb0 	bl	8001884 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e16b      	b.n	8001c24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 815a 	bne.w	8001c1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	2b02      	cmp	r3, #2
 8001980:	d130      	bne.n	80019e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80b4 	beq.w	8001c1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b60      	ldr	r3, [pc, #384]	; (8001c3c <HAL_GPIO_Init+0x30c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a5f      	ldr	r2, [pc, #380]	; (8001c3c <HAL_GPIO_Init+0x30c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_GPIO_Init+0x30c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a5b      	ldr	r2, [pc, #364]	; (8001c40 <HAL_GPIO_Init+0x310>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_GPIO_Init+0x314>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02b      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a51      	ldr	r2, [pc, #324]	; (8001c48 <HAL_GPIO_Init+0x318>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_GPIO_Init+0x31c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x21e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_GPIO_Init+0x320>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x21a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4e      	ldr	r2, [pc, #312]	; (8001c54 <HAL_GPIO_Init+0x324>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x216>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_GPIO_Init+0x328>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x212>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_GPIO_Init+0x330>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x20a>
 8001b36:	2307      	movs	r3, #7
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	; (8001c40 <HAL_GPIO_Init+0x310>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9a:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bee:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae90 	bls.w	800194c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e264      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d075      	beq.n	8001da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cba:	4ba3      	ldr	r3, [pc, #652]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4ba0      	ldr	r3, [pc, #640]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd2:	4b9d      	ldr	r3, [pc, #628]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b99      	ldr	r3, [pc, #612]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d05b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d157      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e23f      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b91      	ldr	r3, [pc, #580]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a90      	ldr	r2, [pc, #576]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a8a      	ldr	r2, [pc, #552]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a87      	ldr	r2, [pc, #540]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d34:	4b84      	ldr	r3, [pc, #528]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a83      	ldr	r2, [pc, #524]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b81      	ldr	r3, [pc, #516]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a80      	ldr	r2, [pc, #512]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f846 	bl	8000de4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f842 	bl	8000de4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e204      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xc0>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f832 	bl	8000de4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f82e 	bl	8000de4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1f0      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0xe8>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db2:	4b65      	ldr	r3, [pc, #404]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1c4      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4952      	ldr	r1, [pc, #328]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_RCC_OscConfig+0x2b0>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe ffe7 	bl	8000de4 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7fe ffe3 	bl	8000de4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1a5      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4940      	ldr	r1, [pc, #256]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <HAL_RCC_OscConfig+0x2b0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7fe ffc6 	bl	8000de4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ffc2 	bl	8000de4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e184      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d030      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_OscConfig+0x2b4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe ffa6 	bl	8000de4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe ffa2 	bl	8000de4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e164      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x200>
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_OscConfig+0x2b4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ff8f 	bl	8000de4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eca:	f7fe ff8b 	bl	8000de4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e14d      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a0 	beq.w	8002036 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10f      	bne.n	8001f26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x2b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d121      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_OscConfig+0x2b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_RCC_OscConfig+0x2b8>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe ff51 	bl	8000de4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e011      	b.n	8001f6a <HAL_RCC_OscConfig+0x2ce>
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
 8001f54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe ff44 	bl	8000de4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e106      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b85      	ldr	r3, [pc, #532]	; (8002180 <HAL_RCC_OscConfig+0x4e4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
 8001f7e:	4b81      	ldr	r3, [pc, #516]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a80      	ldr	r2, [pc, #512]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8a:	e01c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x32a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x312>
 8001f94:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a7a      	ldr	r2, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a77      	ldr	r2, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x32a>
 8001fae:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a74      	ldr	r2, [pc, #464]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a71      	ldr	r2, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7fe ff09 	bl	8000de4 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe ff05 	bl	8000de4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0c5      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	4b65      	ldr	r3, [pc, #404]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ee      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x33a>
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fef3 	bl	8000de4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe feef 	bl	8000de4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0af      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202a:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a55      	ldr	r2, [pc, #340]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8002030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 809b 	beq.w	8002176 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d05c      	beq.n	8002106 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d141      	bne.n	80020d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b4c      	ldr	r3, [pc, #304]	; (8002188 <HAL_RCC_OscConfig+0x4ec>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fec3 	bl	8000de4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe febf 	bl	8000de4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e081      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	019b      	lsls	r3, r3, #6
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	3b01      	subs	r3, #1
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	061b      	lsls	r3, r3, #24
 80020a4:	4937      	ldr	r1, [pc, #220]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_RCC_OscConfig+0x4ec>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fe98 	bl	8000de4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fe94 	bl	8000de4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e056      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x41c>
 80020d6:	e04e      	b.n	8002176 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCC_OscConfig+0x4ec>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe fe81 	bl	8000de4 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e6:	f7fe fe7d 	bl	8000de4 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e03f      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x44a>
 8002104:	e037      	b.n	8002176 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e032      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_RCC_OscConfig+0x4e8>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d028      	beq.n	8002172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d121      	bne.n	8002172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d11a      	bne.n	8002172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002142:	4013      	ands	r3, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002148:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800214a:	4293      	cmp	r3, r2
 800214c:	d111      	bne.n	8002172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d107      	bne.n	8002172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40007000 	.word	0x40007000
 8002184:	40023800 	.word	0x40023800
 8002188:	42470060 	.word	0x42470060

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0cc      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b68      	ldr	r3, [pc, #416]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d90c      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d044      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002246:	2b03      	cmp	r3, #3
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e067      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4934      	ldr	r1, [pc, #208]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7fe fdb2 	bl	8000de4 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe fdae 	bl	8000de4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d20c      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fd12 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00
 8002348:	40023800 	.word	0x40023800
 800234c:	08003808 	.word	0x08003808
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800235e:	2100      	movs	r1, #0
 8002360:	6079      	str	r1, [r7, #4]
 8002362:	2100      	movs	r1, #0
 8002364:	60f9      	str	r1, [r7, #12]
 8002366:	2100      	movs	r1, #0
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800236a:	2100      	movs	r1, #0
 800236c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800236e:	4952      	ldr	r1, [pc, #328]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002370:	6889      	ldr	r1, [r1, #8]
 8002372:	f001 010c 	and.w	r1, r1, #12
 8002376:	2908      	cmp	r1, #8
 8002378:	d00d      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x3e>
 800237a:	2908      	cmp	r1, #8
 800237c:	f200 8094 	bhi.w	80024a8 <HAL_RCC_GetSysClockFreq+0x150>
 8002380:	2900      	cmp	r1, #0
 8002382:	d002      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x32>
 8002384:	2904      	cmp	r1, #4
 8002386:	d003      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x38>
 8002388:	e08e      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800238a:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_GetSysClockFreq+0x164>)
 800238c:	60bb      	str	r3, [r7, #8]
       break;
 800238e:	e08e      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002392:	60bb      	str	r3, [r7, #8]
      break;
 8002394:	e08b      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002396:	4948      	ldr	r1, [pc, #288]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002398:	6849      	ldr	r1, [r1, #4]
 800239a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800239e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a0:	4945      	ldr	r1, [pc, #276]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023a2:	6849      	ldr	r1, [r1, #4]
 80023a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80023a8:	2900      	cmp	r1, #0
 80023aa:	d024      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ac:	4942      	ldr	r1, [pc, #264]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023ae:	6849      	ldr	r1, [r1, #4]
 80023b0:	0989      	lsrs	r1, r1, #6
 80023b2:	4608      	mov	r0, r1
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80023bc:	f04f 0500 	mov.w	r5, #0
 80023c0:	ea00 0204 	and.w	r2, r0, r4
 80023c4:	ea01 0305 	and.w	r3, r1, r5
 80023c8:	493d      	ldr	r1, [pc, #244]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80023ca:	fb01 f003 	mul.w	r0, r1, r3
 80023ce:	2100      	movs	r1, #0
 80023d0:	fb01 f102 	mul.w	r1, r1, r2
 80023d4:	1844      	adds	r4, r0, r1
 80023d6:	493a      	ldr	r1, [pc, #232]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80023d8:	fba2 0101 	umull	r0, r1, r2, r1
 80023dc:	1863      	adds	r3, r4, r1
 80023de:	4619      	mov	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	f7fd feee 	bl	80001c8 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e04a      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	461a      	mov	r2, r3
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	ea02 0400 	and.w	r4, r2, r0
 800240e:	ea03 0501 	and.w	r5, r3, r1
 8002412:	4620      	mov	r0, r4
 8002414:	4629      	mov	r1, r5
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	014b      	lsls	r3, r1, #5
 8002420:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002424:	0142      	lsls	r2, r0, #5
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	1b00      	subs	r0, r0, r4
 800242c:	eb61 0105 	sbc.w	r1, r1, r5
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	018b      	lsls	r3, r1, #6
 800243a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800243e:	0182      	lsls	r2, r0, #6
 8002440:	1a12      	subs	r2, r2, r0
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	f04f 0000 	mov.w	r0, #0
 800244a:	f04f 0100 	mov.w	r1, #0
 800244e:	00d9      	lsls	r1, r3, #3
 8002450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002454:	00d0      	lsls	r0, r2, #3
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	1912      	adds	r2, r2, r4
 800245c:	eb45 0303 	adc.w	r3, r5, r3
 8002460:	f04f 0000 	mov.w	r0, #0
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	0299      	lsls	r1, r3, #10
 800246a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800246e:	0290      	lsls	r0, r2, #10
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f7fd fea2 	bl	80001c8 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4613      	mov	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	3301      	adds	r3, #1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	60bb      	str	r3, [r7, #8]
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_RCC_GetSysClockFreq+0x164>)
 80024aa:	60bb      	str	r3, [r7, #8]
      break;
 80024ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ae:	68bb      	ldr	r3, [r7, #8]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	017d7840 	.word	0x017d7840

080024c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e07b      	b.n	80025ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e6:	d009      	beq.n	80024fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
 80024ee:	e005      	b.n	80024fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fb1c 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	ea42 0103 	orr.w	r1, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	f003 0104 	and.w	r1, r3, #4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f003 0210 	and.w	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b08c      	sub	sp, #48	; 0x30
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_SPI_TransmitReceive+0x26>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e18a      	b.n	8002912 <HAL_SPI_TransmitReceive+0x33c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002604:	f7fe fbee 	bl	8000de4 <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800261e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002622:	2b01      	cmp	r3, #1
 8002624:	d00f      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x70>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800262c:	d107      	bne.n	800263e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <HAL_SPI_TransmitReceive+0x68>
 8002636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800263a:	2b04      	cmp	r3, #4
 800263c:	d003      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002644:	e15b      	b.n	80028fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x82>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x82>
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800265e:	e14e      	b.n	80028fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b04      	cmp	r3, #4
 800266a:	d003      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d007      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d0:	d178      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_TransmitReceive+0x10a>
 80026da:	8b7b      	ldrh	r3, [r7, #26]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d166      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	881a      	ldrh	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	1c9a      	adds	r2, r3, #2
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002704:	e053      	b.n	80027ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d11b      	bne.n	800274c <HAL_SPI_TransmitReceive+0x176>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_SPI_TransmitReceive+0x176>
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d113      	bne.n	800274c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	1c9a      	adds	r2, r3, #2
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d119      	bne.n	800278e <HAL_SPI_TransmitReceive+0x1b8>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	b292      	uxth	r2, r2
 8002770:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	1c9a      	adds	r2, r3, #2
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800278a:	2301      	movs	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800278e:	f7fe fb29 	bl	8000de4 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800279a:	429a      	cmp	r2, r3
 800279c:	d807      	bhi.n	80027ae <HAL_SPI_TransmitReceive+0x1d8>
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d003      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027ac:	e0a7      	b.n	80028fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1a6      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x130>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1a1      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x130>
 80027c2:	e07c      	b.n	80028be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0x1fc>
 80027cc:	8b7b      	ldrh	r3, [r7, #26]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d16b      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027f8:	e057      	b.n	80028aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b02      	cmp	r3, #2
 8002806:	d11c      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x26c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d017      	beq.n	8002842 <HAL_SPI_TransmitReceive+0x26c>
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d114      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d119      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x2ae>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d014      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002880:	2301      	movs	r3, #1
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002884:	f7fe faae 	bl	8000de4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002890:	429a      	cmp	r2, r3
 8002892:	d803      	bhi.n	800289c <HAL_SPI_TransmitReceive+0x2c6>
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289a:	d102      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x2cc>
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028a8:	e029      	b.n	80028fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1a2      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x224>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d19d      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f8b2 	bl	8002a2c <SPI_EndRxTxTransaction>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028da:	e010      	b.n	80028fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	e000      	b.n	80028fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800290e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002912:	4618      	mov	r0, r3
 8002914:	3730      	adds	r7, #48	; 0x30
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800292c:	f7fe fa5a 	bl	8000de4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	4413      	add	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800293c:	f7fe fa52 	bl	8000de4 <HAL_GetTick>
 8002940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	015b      	lsls	r3, r3, #5
 8002948:	0d1b      	lsrs	r3, r3, #20
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002952:	e054      	b.n	80029fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d050      	beq.n	80029fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800295c:	f7fe fa42 	bl	8000de4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	429a      	cmp	r2, r3
 800296a:	d902      	bls.n	8002972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d13d      	bne.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800298a:	d111      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002994:	d004      	beq.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299e:	d107      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b8:	d10f      	bne.n	80029da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e017      	b.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d19b      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000

08002a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a38:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <SPI_EndRxTxTransaction+0x7c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <SPI_EndRxTxTransaction+0x80>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0d5b      	lsrs	r3, r3, #21
 8002a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a56:	d112      	bne.n	8002a7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff ff5a 	bl	800291c <SPI_WaitFlagStateUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e00f      	b.n	8002a9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d0f2      	beq.n	8002a7e <SPI_EndRxTxTransaction+0x52>
 8002a98:	e000      	b.n	8002a9c <SPI_EndRxTxTransaction+0x70>
        break;
 8002a9a:	bf00      	nop
  }

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	165e9f81 	.word	0x165e9f81

08002ab0 <CAN1_Mode_Init>:
CAN_HandleTypeDef	CAN2_Handler;   //CAN1���
CAN_TxHeaderTypeDef	Tx2Header;      //����
CAN_RxHeaderTypeDef	Rx2Header;      //����

u8 CAN1_Mode_Init(u32 tsjw,u32 tbs2,u32 tbs1,u16 brp,u32 mode)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	807b      	strh	r3, [r7, #2]
	CAN_InitTypeDef		CAN1_InitConf;
    
    CAN1_Handler.Instance=CAN1;
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <CAN1_Mode_Init+0x88>)
 8002ac2:	601a      	str	r2, [r3, #0]
	
	CAN1_Handler.Init = CAN1_InitConf;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002ac6:	1d1c      	adds	r4, r3, #4
 8002ac8:	f107 0514 	add.w	r5, r7, #20
 8002acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
    CAN1_Handler.Init.Prescaler=brp;				//��Ƶϵ��(Fdiv)Ϊbrp+1
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002adc:	6053      	str	r3, [r2, #4]
    CAN1_Handler.Init.Mode=mode;					//ģʽ���� 
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae2:	6093      	str	r3, [r2, #8]
    CAN1_Handler.Init.SyncJumpWidth=tsjw;			//����ͬ����Ծ���(Tsjw)Ϊtsjw+1��ʱ�䵥λ CAN_SJW_1TQ~CAN_SJW_4TQ
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	60d3      	str	r3, [r2, #12]
    CAN1_Handler.Init.TimeSeg1=tbs1;				//tbs1��ΧCAN_BS1_1TQ~CAN_BS1_16TQ
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6113      	str	r3, [r2, #16]
    CAN1_Handler.Init.TimeSeg2=tbs2;				//tbs2��ΧCAN_BS2_1TQ~CAN_BS2_8TQ
 8002af0:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6153      	str	r3, [r2, #20]
    CAN1_Handler.Init.TimeTriggeredMode=DISABLE;	//��ʱ�䴥��ͨ��ģʽ 
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	761a      	strb	r2, [r3, #24]
    CAN1_Handler.Init.AutoBusOff=DISABLE;			//����Զ����߹���
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	765a      	strb	r2, [r3, #25]
    CAN1_Handler.Init.AutoWakeUp=DISABLE;			//˯��ģʽͨ���������(���CAN->MCR��SLEEPλ)
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	769a      	strb	r2, [r3, #26]
    CAN1_Handler.Init.AutoRetransmission=ENABLE;	//��ֹ�����Զ����� 
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	76da      	strb	r2, [r3, #27]
    CAN1_Handler.Init.ReceiveFifoLocked=DISABLE;	//���Ĳ�����,�µĸ��Ǿɵ� 
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    CAN1_Handler.Init.TransmitFifoPriority=DISABLE;	//���ȼ��ɱ��ı�ʶ������ 
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	775a      	strb	r2, [r3, #29]
	
    if(HAL_CAN_Init(&CAN1_Handler)!=HAL_OK)			//��ʼ��
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <CAN1_Mode_Init+0x84>)
 8002b1c:	f7fe f992 	bl	8000e44 <HAL_CAN_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <CAN1_Mode_Init+0x7a>
		return 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <CAN1_Mode_Init+0x7c>
    return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3730      	adds	r7, #48	; 0x30
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}
 8002b34:	20000170 	.word	0x20000170
 8002b38:	40006400 	.word	0x40006400

08002b3c <CAN2_Mode_Init>:
u8 CAN2_Mode_Init(u32 tsjw,u32 tbs2,u32 tbs1,u16 brp,u32 mode)
{
 8002b3c:	b5b0      	push	{r4, r5, r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	807b      	strh	r3, [r7, #2]
	CAN_InitTypeDef		CAN2_InitConf;
    
    CAN2_Handler.Instance=CAN2;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <CAN2_Mode_Init+0x88>)
 8002b4e:	601a      	str	r2, [r3, #0]
	
	CAN2_Handler.Init = CAN2_InitConf;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b52:	1d1c      	adds	r4, r3, #4
 8002b54:	f107 0514 	add.w	r5, r7, #20
 8002b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
    CAN2_Handler.Init.Prescaler=brp;				//��Ƶϵ��(Fdiv)Ϊbrp+1
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b68:	6053      	str	r3, [r2, #4]
    CAN2_Handler.Init.Mode=mode;					//ģʽ���� 
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6e:	6093      	str	r3, [r2, #8]
    CAN2_Handler.Init.SyncJumpWidth=tsjw;			//����ͬ����Ծ���(Tsjw)Ϊtsjw+1��ʱ�䵥λ CAN_SJW_1TQ~CAN_SJW_4TQ
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	60d3      	str	r3, [r2, #12]
    CAN2_Handler.Init.TimeSeg1=tbs1;				//tbs1��ΧCAN_BS1_1TQ~CAN_BS1_16TQ
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6113      	str	r3, [r2, #16]
    CAN2_Handler.Init.TimeSeg2=tbs2;				//tbs2��ΧCAN_BS2_1TQ~CAN_BS2_8TQ
 8002b7c:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6153      	str	r3, [r2, #20]
    CAN2_Handler.Init.TimeTriggeredMode=DISABLE;	//��ʱ�䴥��ͨ��ģʽ 
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	761a      	strb	r2, [r3, #24]
    CAN2_Handler.Init.AutoBusOff=DISABLE;			//����Զ����߹���
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	765a      	strb	r2, [r3, #25]
    CAN2_Handler.Init.AutoWakeUp=DISABLE;			//˯��ģʽͨ���������(���CAN->MCR��SLEEPλ)
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	769a      	strb	r2, [r3, #26]
    CAN2_Handler.Init.AutoRetransmission=ENABLE;	//��ֹ�����Զ����� 
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	76da      	strb	r2, [r3, #27]
    CAN2_Handler.Init.ReceiveFifoLocked=DISABLE;	//���Ĳ�����,�µĸ��Ǿɵ� 
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    CAN2_Handler.Init.TransmitFifoPriority=DISABLE;	//���ȼ��ɱ��ı�ʶ������ 
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	775a      	strb	r2, [r3, #29]
	
    if(HAL_CAN_Init(&CAN2_Handler)!=HAL_OK)			//��ʼ��
 8002ba6:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <CAN2_Mode_Init+0x84>)
 8002ba8:	f7fe f94c 	bl	8000e44 <HAL_CAN_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <CAN2_Mode_Init+0x7a>
		return 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <CAN2_Mode_Init+0x7c>
    return 0;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3730      	adds	r7, #48	; 0x30
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc0:	20000130 	.word	0x20000130
 8002bc4:	40006800 	.word	0x40006800

08002bc8 <CAN_Config>:
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);        //��ʼ��	
	
}*/

void CAN_Config(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8002bf2:	230e      	movs	r3, #14
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&CAN1_Handler, &sFilterConfig) != HAL_OK)
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4816      	ldr	r0, [pc, #88]	; (8002c54 <CAN_Config+0x8c>)
 8002bfc:	f7fe fa1e 	bl	800103c <HAL_CAN_ConfigFilter>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d000      	beq.n	8002c08 <CAN_Config+0x40>
  {
    /* Filter configuration Error */
    while(1)
 8002c06:	e7fe      	b.n	8002c06 <CAN_Config+0x3e>
	  {
	  }
  }
  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&CAN1_Handler) != HAL_OK)
 8002c08:	4812      	ldr	r0, [pc, #72]	; (8002c54 <CAN_Config+0x8c>)
 8002c0a:	f7fe faf7 	bl	80011fc <HAL_CAN_Start>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d000      	beq.n	8002c16 <CAN_Config+0x4e>
  {
    /* Start Error */
    while(1)
 8002c14:	e7fe      	b.n	8002c14 <CAN_Config+0x4c>
	  {
	  }
  }
  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&CAN1_Handler, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002c16:	2102      	movs	r1, #2
 8002c18:	480e      	ldr	r0, [pc, #56]	; (8002c54 <CAN_Config+0x8c>)
 8002c1a:	f7fe fd7d 	bl	8001718 <HAL_CAN_ActivateNotification>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d000      	beq.n	8002c26 <CAN_Config+0x5e>
  {
    /* Notification Error */
    while(1)
 8002c24:	e7fe      	b.n	8002c24 <CAN_Config+0x5c>
	  {
	  }
  }
  /*##-5- Configure Transmission process #####################################*/
  TxHeader.StdId = 0x321;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <CAN_Config+0x90>)
 8002c28:	f240 3221 	movw	r2, #801	; 0x321
 8002c2c:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <CAN_Config+0x90>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <CAN_Config+0x90>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <CAN_Config+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 2;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <CAN_Config+0x90>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002c46:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <CAN_Config+0x90>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	751a      	strb	r2, [r3, #20]
}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000170 	.word	0x20000170
 8002c58:	200001b4 	.word	0x200001b4

08002c5c <CAN2_Config>:
void CAN2_Config(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 28;
 8002c86:	231c      	movs	r3, #28
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&CAN2_Handler, &sFilterConfig) != HAL_OK)
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4816      	ldr	r0, [pc, #88]	; (8002ce8 <CAN2_Config+0x8c>)
 8002c90:	f7fe f9d4 	bl	800103c <HAL_CAN_ConfigFilter>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d000      	beq.n	8002c9c <CAN2_Config+0x40>
  {
    /* Filter configuration Error */
    while(1)
 8002c9a:	e7fe      	b.n	8002c9a <CAN2_Config+0x3e>
	  {
	  }
  }
  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&CAN2_Handler) != HAL_OK)
 8002c9c:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <CAN2_Config+0x8c>)
 8002c9e:	f7fe faad 	bl	80011fc <HAL_CAN_Start>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d000      	beq.n	8002caa <CAN2_Config+0x4e>
  {
    /* Start Error */
    while(1)
 8002ca8:	e7fe      	b.n	8002ca8 <CAN2_Config+0x4c>
	  {
	  }
  }
  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&CAN2_Handler, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002caa:	2102      	movs	r1, #2
 8002cac:	480e      	ldr	r0, [pc, #56]	; (8002ce8 <CAN2_Config+0x8c>)
 8002cae:	f7fe fd33 	bl	8001718 <HAL_CAN_ActivateNotification>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d000      	beq.n	8002cba <CAN2_Config+0x5e>
  {
    /* Notification Error */
    while(1)
 8002cb8:	e7fe      	b.n	8002cb8 <CAN2_Config+0x5c>
	  {
	  }
  }
  /*##-5- Configure Transmission process #####################################*/
  Tx2Header.StdId = 0x321;
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <CAN2_Config+0x90>)
 8002cbc:	f240 3221 	movw	r2, #801	; 0x321
 8002cc0:	601a      	str	r2, [r3, #0]
  Tx2Header.ExtId = 0x01;
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <CAN2_Config+0x90>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	605a      	str	r2, [r3, #4]
  Tx2Header.RTR = CAN_RTR_DATA;
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <CAN2_Config+0x90>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  Tx2Header.IDE = CAN_ID_STD;
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <CAN2_Config+0x90>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  Tx2Header.DLC = 2;
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <CAN2_Config+0x90>)
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	611a      	str	r2, [r3, #16]
  Tx2Header.TransmitGlobalTime = DISABLE;
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <CAN2_Config+0x90>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	751a      	strb	r2, [r3, #20]
}
 8002ce0:	bf00      	nop
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000130 	.word	0x20000130
 8002cec:	20000158 	.word	0x20000158

08002cf0 <CAN1_Send_Msg>:
//len:���ݳ���(���Ϊ8)				     
//msg:����ָ��,���Ϊ8���ֽ�.
//����ֵ:0,�ɹ�;
//		 ����,ʧ��;
u8 CAN1_Send_Msg(u8* msg,u8 len)
{	
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
    u8 i=0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	75fb      	strb	r3, [r7, #23]
	u32 TxMailbox;
	u8 message[8];
    TxHeader.StdId=0X12;        //��׼��ʶ��
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <CAN1_Send_Msg+0x88>)
 8002d02:	2212      	movs	r2, #18
 8002d04:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId=0x12;        //��չ��ʶ��(29λ)
 8002d06:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <CAN1_Send_Msg+0x88>)
 8002d08:	2212      	movs	r2, #18
 8002d0a:	605a      	str	r2, [r3, #4]
    TxHeader.IDE=CAN_ID_STD;    //ʹ�ñ�׼֡
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <CAN1_Send_Msg+0x88>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
    TxHeader.RTR=CAN_RTR_DATA;  //����֡
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <CAN1_Send_Msg+0x88>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
    TxHeader.DLC=len;                
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <CAN1_Send_Msg+0x88>)
 8002d1c:	6113      	str	r3, [r2, #16]
    for(i=0;i<len;i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]
 8002d22:	e00c      	b.n	8002d3e <CAN1_Send_Msg+0x4e>
    {
		message[i]=msg[i];
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	441a      	add	r2, r3
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	f107 0118 	add.w	r1, r7, #24
 8002d32:	440b      	add	r3, r1
 8002d34:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=0;i<len;i++)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
 8002d3e:	7dfa      	ldrb	r2, [r7, #23]
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3ee      	bcc.n	8002d24 <CAN1_Send_Msg+0x34>
	}
    if(HAL_CAN_AddTxMessage(&CAN1_Handler, &TxHeader, message, &TxMailbox) != HAL_OK)//����
 8002d46:	f107 0310 	add.w	r3, r7, #16
 8002d4a:	f107 0208 	add.w	r2, r7, #8
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <CAN1_Send_Msg+0x88>)
 8002d50:	480a      	ldr	r0, [pc, #40]	; (8002d7c <CAN1_Send_Msg+0x8c>)
 8002d52:	f7fe fa97 	bl	8001284 <HAL_CAN_AddTxMessage>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <CAN1_Send_Msg+0x70>
	{
		return 1;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e007      	b.n	8002d70 <CAN1_Send_Msg+0x80>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&CAN1_Handler) != 3) {}
 8002d60:	bf00      	nop
 8002d62:	4806      	ldr	r0, [pc, #24]	; (8002d7c <CAN1_Send_Msg+0x8c>)
 8002d64:	f7fe fb69 	bl	800143a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d1f9      	bne.n	8002d62 <CAN1_Send_Msg+0x72>
    return 0;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	200001b4 	.word	0x200001b4
 8002d7c:	20000170 	.word	0x20000170

08002d80 <CAN2_Send_Msg>:
u8 CAN2_Send_Msg(u8* msg,u8 len)
{	
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
    u8 i=0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	75fb      	strb	r3, [r7, #23]
	u32 TxMailbox;
	u8 message[8];
    Tx2Header.StdId=0X12;        //��׼��ʶ��
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <CAN2_Send_Msg+0x88>)
 8002d92:	2212      	movs	r2, #18
 8002d94:	601a      	str	r2, [r3, #0]
    Tx2Header.ExtId=0x12;        //��չ��ʶ��(29λ)
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <CAN2_Send_Msg+0x88>)
 8002d98:	2212      	movs	r2, #18
 8002d9a:	605a      	str	r2, [r3, #4]
    Tx2Header.IDE=CAN_ID_STD;    //ʹ�ñ�׼֡
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <CAN2_Send_Msg+0x88>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
    Tx2Header.RTR=CAN_RTR_DATA;  //����֡
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <CAN2_Send_Msg+0x88>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
    Tx2Header.DLC=len;                
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <CAN2_Send_Msg+0x88>)
 8002dac:	6113      	str	r3, [r2, #16]
    for(i=0;i<len;i++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
 8002db2:	e00c      	b.n	8002dce <CAN2_Send_Msg+0x4e>
    {
		message[i]=msg[i];
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	441a      	add	r2, r3
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	f107 0118 	add.w	r1, r7, #24
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=0;i<len;i++)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
 8002dce:	7dfa      	ldrb	r2, [r7, #23]
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d3ee      	bcc.n	8002db4 <CAN2_Send_Msg+0x34>
	}
    if(HAL_CAN_AddTxMessage(&CAN2_Handler, &Tx2Header, message, &TxMailbox) != HAL_OK)//����
 8002dd6:	f107 0310 	add.w	r3, r7, #16
 8002dda:	f107 0208 	add.w	r2, r7, #8
 8002dde:	490a      	ldr	r1, [pc, #40]	; (8002e08 <CAN2_Send_Msg+0x88>)
 8002de0:	480a      	ldr	r0, [pc, #40]	; (8002e0c <CAN2_Send_Msg+0x8c>)
 8002de2:	f7fe fa4f 	bl	8001284 <HAL_CAN_AddTxMessage>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <CAN2_Send_Msg+0x70>
	{
		return 1;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e007      	b.n	8002e00 <CAN2_Send_Msg+0x80>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&CAN2_Handler) != 3) {}
 8002df0:	bf00      	nop
 8002df2:	4806      	ldr	r0, [pc, #24]	; (8002e0c <CAN2_Send_Msg+0x8c>)
 8002df4:	f7fe fb21 	bl	800143a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d1f9      	bne.n	8002df2 <CAN2_Send_Msg+0x72>
    return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000158 	.word	0x20000158
 8002e0c:	20000130 	.word	0x20000130

08002e10 <CAN1_Receive_Msg>:
//can�ڽ������ݲ�ѯ
//buf:���ݻ�����;	 
//����ֵ:0,�����ݱ��յ�;
//		 ����,���յ����ݳ���;
u8 CAN1_Receive_Msg(u8 *buf)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 	u32 i;
	u8	RxData[8];

	if(HAL_CAN_GetRxFifoFillLevel(&CAN1_Handler, CAN_RX_FIFO0) != 1)
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4817      	ldr	r0, [pc, #92]	; (8002e78 <CAN1_Receive_Msg+0x68>)
 8002e1c:	f7fe fc54 	bl	80016c8 <HAL_CAN_GetRxFifoFillLevel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d001      	beq.n	8002e2a <CAN1_Receive_Msg+0x1a>
	{
		return 0xF1;
 8002e26:	23f1      	movs	r3, #241	; 0xf1
 8002e28:	e022      	b.n	8002e70 <CAN1_Receive_Msg+0x60>
	}

	if(HAL_CAN_GetRxMessage(&CAN1_Handler, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <CAN1_Receive_Msg+0x6c>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	4811      	ldr	r0, [pc, #68]	; (8002e78 <CAN1_Receive_Msg+0x68>)
 8002e34:	f7fe fb36 	bl	80014a4 <HAL_CAN_GetRxMessage>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <CAN1_Receive_Msg+0x32>
	{
		return 0xF2;
 8002e3e:	23f2      	movs	r3, #242	; 0xf2
 8002e40:	e016      	b.n	8002e70 <CAN1_Receive_Msg+0x60>
	}
    for(i=0;i<RxHeader.DLC;i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e00b      	b.n	8002e60 <CAN1_Receive_Msg+0x50>
    buf[i]=RxData[i];
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f107 010c 	add.w	r1, r7, #12
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	440a      	add	r2, r1
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	701a      	strb	r2, [r3, #0]
    for(i=0;i<RxHeader.DLC;i++)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <CAN1_Receive_Msg+0x6c>)
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3ee      	bcc.n	8002e48 <CAN1_Receive_Msg+0x38>
	return RxHeader.DLC;
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <CAN1_Receive_Msg+0x6c>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	b2db      	uxtb	r3, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000170 	.word	0x20000170
 8002e7c:	200001cc 	.word	0x200001cc

08002e80 <CAN2_Receive_Msg>:
u8 CAN2_Receive_Msg(u8 *buf)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 	u32 i;
	u8	RxData[8];

	if(HAL_CAN_GetRxFifoFillLevel(&CAN2_Handler, CAN_RX_FIFO0) != 1)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4817      	ldr	r0, [pc, #92]	; (8002ee8 <CAN2_Receive_Msg+0x68>)
 8002e8c:	f7fe fc1c 	bl	80016c8 <HAL_CAN_GetRxFifoFillLevel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d001      	beq.n	8002e9a <CAN2_Receive_Msg+0x1a>
	{
		return 0xF1;
 8002e96:	23f1      	movs	r3, #241	; 0xf1
 8002e98:	e022      	b.n	8002ee0 <CAN2_Receive_Msg+0x60>
	}

	if(HAL_CAN_GetRxMessage(&CAN2_Handler, CAN_RX_FIFO0, &Rx2Header, RxData) != HAL_OK)
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	4a13      	ldr	r2, [pc, #76]	; (8002eec <CAN2_Receive_Msg+0x6c>)
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4811      	ldr	r0, [pc, #68]	; (8002ee8 <CAN2_Receive_Msg+0x68>)
 8002ea4:	f7fe fafe 	bl	80014a4 <HAL_CAN_GetRxMessage>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <CAN2_Receive_Msg+0x32>
	{
		return 0xF2;
 8002eae:	23f2      	movs	r3, #242	; 0xf2
 8002eb0:	e016      	b.n	8002ee0 <CAN2_Receive_Msg+0x60>
	}
    for(i=0;i<Rx2Header.DLC;i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e00b      	b.n	8002ed0 <CAN2_Receive_Msg+0x50>
    buf[i]=RxData[i];
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f107 010c 	add.w	r1, r7, #12
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	440a      	add	r2, r1
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	701a      	strb	r2, [r3, #0]
    for(i=0;i<Rx2Header.DLC;i++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <CAN2_Receive_Msg+0x6c>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d3ee      	bcc.n	8002eb8 <CAN2_Receive_Msg+0x38>
	return Rx2Header.DLC;
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <CAN2_Receive_Msg+0x6c>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	b2db      	uxtb	r3, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000130 	.word	0x20000130
 8002eec:	20000198 	.word	0x20000198

08002ef0 <NRF24L01_SPI_Init>:
const u8 TX_ADDRESS[TX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //���͵�ַ
const u8 RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //���͵�ַ

//���NRF24L01�޸�SPI1����
void NRF24L01_SPI_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
    __HAL_SPI_DISABLE(&SPI1_Handler);               //�ȹر�SPI1
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <NRF24L01_SPI_Init+0x3c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <NRF24L01_SPI_Init+0x3c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f02:	601a      	str	r2, [r3, #0]
    SPI1_Handler.Init.CLKPolarity=SPI_POLARITY_LOW; //����ͬ��ʱ�ӵĿ���״̬Ϊ�͵�ƽ
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <NRF24L01_SPI_Init+0x3c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
    SPI1_Handler.Init.CLKPhase=SPI_PHASE_1EDGE;     //����ͬ��ʱ�ӵĵ�1�������أ��������½������ݱ�����
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <NRF24L01_SPI_Init+0x3c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&SPI1_Handler);
 8002f10:	4806      	ldr	r0, [pc, #24]	; (8002f2c <NRF24L01_SPI_Init+0x3c>)
 8002f12:	f7ff fad7 	bl	80024c4 <HAL_SPI_Init>
    __HAL_SPI_ENABLE(&SPI1_Handler);                //ʹ��SPI1
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <NRF24L01_SPI_Init+0x3c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <NRF24L01_SPI_Init+0x3c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000240 	.word	0x20000240

08002f30 <NRF24L01_2_SPI_Init>:

void NRF24L01_2_SPI_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
    __HAL_SPI_DISABLE(&SPI2_Handler);               //�ȹر�SPI1
 8002f34:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <NRF24L01_2_SPI_Init+0x3c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <NRF24L01_2_SPI_Init+0x3c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
    SPI2_Handler.Init.CLKPolarity=SPI_POLARITY_LOW; //����ͬ��ʱ�ӵĿ���״̬Ϊ�͵�ƽ
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <NRF24L01_2_SPI_Init+0x3c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
    SPI2_Handler.Init.CLKPhase=SPI_PHASE_1EDGE;     //����ͬ��ʱ�ӵĵ�1�������أ��������½������ݱ�����
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <NRF24L01_2_SPI_Init+0x3c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&SPI2_Handler);
 8002f50:	4806      	ldr	r0, [pc, #24]	; (8002f6c <NRF24L01_2_SPI_Init+0x3c>)
 8002f52:	f7ff fab7 	bl	80024c4 <HAL_SPI_Init>
    __HAL_SPI_ENABLE(&SPI2_Handler);                //ʹ��SPI1
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <NRF24L01_2_SPI_Init+0x3c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <NRF24L01_2_SPI_Init+0x3c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200001e8 	.word	0x200001e8

08002f70 <NRF24L01_Init>:
//��ʼ��24L01��IO��
void NRF24L01_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <NRF24L01_Init+0xb4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a29      	ldr	r2, [pc, #164]	; (8003024 <NRF24L01_Init+0xb4>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <NRF24L01_Init+0xb4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();			//����GPIOGʱ��
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	4b23      	ldr	r3, [pc, #140]	; (8003024 <NRF24L01_Init+0xb4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a22      	ldr	r2, [pc, #136]	; (8003024 <NRF24L01_Init+0xb4>)
 8002f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <NRF24L01_Init+0xb4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]

    GPIO_Initure.Pin=GPIO_PIN_14;	
 8002fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8002fb8:	2301      	movs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;     //����	
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //��ʼ��	
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4818      	ldr	r0, [pc, #96]	; (8003028 <NRF24L01_Init+0xb8>)
 8002fc8:	f7fe fcb2 	bl	8001930 <HAL_GPIO_Init>

    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8002fcc:	2301      	movs	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;     //����
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_Initure.Pin=GPIO_PIN_5|GPIO_PIN_6;	//PG6,7
 8002fd8:	2360      	movs	r3, #96	; 0x60
 8002fda:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD,&GPIO_Initure);     //��ʼ��
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4812      	ldr	r0, [pc, #72]	; (800302c <NRF24L01_Init+0xbc>)
 8002fe4:	f7fe fca4 	bl	8001930 <HAL_GPIO_Init>
	
	//GPIOG.8��������
	GPIO_Initure.Pin=GPIO_PIN_7;			//PG8
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Mode=GPIO_MODE_INPUT;      //����
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD,&GPIO_Initure);     //��ʼ��
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <NRF24L01_Init+0xbc>)
 8002ff8:	f7fe fc9a 	bl	8001930 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);//PB14���1,��ֹSPI FLASH����NRF��ͨ�� 
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003002:	4809      	ldr	r0, [pc, #36]	; (8003028 <NRF24L01_Init+0xb8>)
 8003004:	f7fe fe30 	bl	8001c68 <HAL_GPIO_WritePin>
    
	SPI1_Init();    		                //��ʼ��SPI1
 8003008:	f000 fac2 	bl	8003590 <SPI1_Init>
    NRF24L01_SPI_Init();                    //���NRF���ص��޸�SPI������	
 800300c:	f7ff ff70 	bl	8002ef0 <NRF24L01_SPI_Init>
	NRF24L01_CE=0; 			                //ʹ��24L01
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <NRF24L01_Init+0xc0>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
	NRF24L01_CSN=1;			                //SPIƬѡȡ��	 		 	 
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <NRF24L01_Init+0xc4>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	3720      	adds	r7, #32
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40023800 	.word	0x40023800
 8003028:	40020400 	.word	0x40020400
 800302c:	40020c00 	.word	0x40020c00
 8003030:	42418294 	.word	0x42418294
 8003034:	42418298 	.word	0x42418298

08003038 <NRF24L01_2_Init>:
void NRF24L01_2_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
    __HAL_RCC_GPIOC_CLK_ENABLE();			//����GPIOGʱ��
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <NRF24L01_2_Init+0x90>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <NRF24L01_2_Init+0x90>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <NRF24L01_2_Init+0x90>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <NRF24L01_2_Init+0x90>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <NRF24L01_2_Init+0x90>)
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <NRF24L01_2_Init+0x90>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
    
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8003076:	2301      	movs	r3, #1
 8003078:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 800307a:	2301      	movs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;     //����
 800307e:	2303      	movs	r3, #3
 8003080:	61bb      	str	r3, [r7, #24]
    GPIO_Initure.Pin=GPIO_PIN_8|GPIO_PIN_9;	//PG6,7
 8003082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003086:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD,&GPIO_Initure);     //��ʼ��
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	4619      	mov	r1, r3
 800308e:	480f      	ldr	r0, [pc, #60]	; (80030cc <NRF24L01_2_Init+0x94>)
 8003090:	f7fe fc4e 	bl	8001930 <HAL_GPIO_Init>
	
	//GPIOG.8��������
	GPIO_Initure.Pin=GPIO_PIN_10;			//PG8
 8003094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003098:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Mode=GPIO_MODE_INPUT;      //����
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD,&GPIO_Initure);     //��ʼ��
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	4619      	mov	r1, r3
 80030a4:	4809      	ldr	r0, [pc, #36]	; (80030cc <NRF24L01_2_Init+0x94>)
 80030a6:	f7fe fc43 	bl	8001930 <HAL_GPIO_Init>
	

    
	SPI2_Init();    		                //��ʼ��SPI1
 80030aa:	f000 faad 	bl	8003608 <SPI2_Init>
    NRF24L01_2_SPI_Init();                    //���NRF���ص��޸�SPI������	
 80030ae:	f7ff ff3f 	bl	8002f30 <NRF24L01_2_SPI_Init>
	NRF24L01_2_CE=0; 			                //ʹ��24L01
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <NRF24L01_2_Init+0x98>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
	NRF24L01_2_CSN=1;			                //SPIƬѡȡ��	 		 	 
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <NRF24L01_2_Init+0x9c>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	424182a0 	.word	0x424182a0
 80030d4:	424182a4 	.word	0x424182a4

080030d8 <NRF24L01_Check>:
//���24L01�Ƿ����
//����ֵ:0���ɹ�;1��ʧ��	
u8 NRF24L01_Check(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
	u8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 80030de:	4a19      	ldr	r2, [pc, #100]	; (8003144 <NRF24L01_Check+0x6c>)
 80030e0:	463b      	mov	r3, r7
 80030e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030e6:	6018      	str	r0, [r3, #0]
 80030e8:	3304      	adds	r3, #4
 80030ea:	7019      	strb	r1, [r3, #0]
	u8 i;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi�ٶ�Ϊ10.5Mhz����24L01�����SPIʱ��Ϊ10Mhz,�����һ��û��ϵ��    	 
 80030ec:	2010      	movs	r0, #16
 80030ee:	f000 fac7 	bl	8003680 <SPI1_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//д��5���ֽڵĵ�ַ.	
 80030f2:	463b      	mov	r3, r7
 80030f4:	2205      	movs	r2, #5
 80030f6:	4619      	mov	r1, r3
 80030f8:	2030      	movs	r0, #48	; 0x30
 80030fa:	f000 f931 	bl	8003360 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //����д��ĵ�ַ  
 80030fe:	463b      	mov	r3, r7
 8003100:	2205      	movs	r2, #5
 8003102:	4619      	mov	r1, r3
 8003104:	2010      	movs	r0, #16
 8003106:	f000 f8cf 	bl	80032a8 <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;	 							   
 800310a:	2300      	movs	r3, #0
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	e00a      	b.n	8003126 <NRF24L01_Check+0x4e>
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f107 0208 	add.w	r2, r7, #8
 8003116:	4413      	add	r3, r2
 8003118:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800311c:	2ba5      	cmp	r3, #165	; 0xa5
 800311e:	d106      	bne.n	800312e <NRF24L01_Check+0x56>
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	3301      	adds	r3, #1
 8003124:	71fb      	strb	r3, [r7, #7]
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d9f1      	bls.n	8003110 <NRF24L01_Check+0x38>
 800312c:	e000      	b.n	8003130 <NRF24L01_Check+0x58>
 800312e:	bf00      	nop
	if(i!=5)return 1;//���24L01����	
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d001      	beq.n	800313a <NRF24L01_Check+0x62>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <NRF24L01_Check+0x64>
	return 0;		 //��⵽24L01
 800313a:	2300      	movs	r3, #0
}	
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	08003800 	.word	0x08003800

08003148 <NRF24L01_2_Check>:
u8 NRF24L01_2_Check(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
	u8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 800314e:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <NRF24L01_2_Check+0x6c>)
 8003150:	463b      	mov	r3, r7
 8003152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003156:	6018      	str	r0, [r3, #0]
 8003158:	3304      	adds	r3, #4
 800315a:	7019      	strb	r1, [r3, #0]
	u8 i;
	SPI2_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi�ٶ�Ϊ10.5Mhz����24L01�����SPIʱ��Ϊ10Mhz,�����һ��û��ϵ��    	 
 800315c:	2010      	movs	r0, #16
 800315e:	f000 fabd 	bl	80036dc <SPI2_SetSpeed>
	NRF24L01_2_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//д��5���ֽڵĵ�ַ.	
 8003162:	463b      	mov	r3, r7
 8003164:	2205      	movs	r2, #5
 8003166:	4619      	mov	r1, r3
 8003168:	2030      	movs	r0, #48	; 0x30
 800316a:	f000 f925 	bl	80033b8 <NRF24L01_2_Write_Buf>
	NRF24L01_2_Read_Buf(TX_ADDR,buf,5); //����д��ĵ�ַ  
 800316e:	463b      	mov	r3, r7
 8003170:	2205      	movs	r2, #5
 8003172:	4619      	mov	r1, r3
 8003174:	2010      	movs	r0, #16
 8003176:	f000 f8c5 	bl	8003304 <NRF24L01_2_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;	 							   
 800317a:	2300      	movs	r3, #0
 800317c:	71fb      	strb	r3, [r7, #7]
 800317e:	e00a      	b.n	8003196 <NRF24L01_2_Check+0x4e>
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f107 0208 	add.w	r2, r7, #8
 8003186:	4413      	add	r3, r2
 8003188:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800318c:	2ba5      	cmp	r3, #165	; 0xa5
 800318e:	d106      	bne.n	800319e <NRF24L01_2_Check+0x56>
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	3301      	adds	r3, #1
 8003194:	71fb      	strb	r3, [r7, #7]
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d9f1      	bls.n	8003180 <NRF24L01_2_Check+0x38>
 800319c:	e000      	b.n	80031a0 <NRF24L01_2_Check+0x58>
 800319e:	bf00      	nop
	if(i!=5)return 1;//���24L01����	
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d001      	beq.n	80031aa <NRF24L01_2_Check+0x62>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <NRF24L01_2_Check+0x64>
	return 0;		 //��⵽24L01
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	08003800 	.word	0x08003800

080031b8 <NRF24L01_Write_Reg>:
//SPIд�Ĵ���
//reg:ָ���Ĵ�����ַ
//value:д���ֵ
u8 NRF24L01_Write_Reg(u8 reg,u8 value)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	460a      	mov	r2, r1
 80031c2:	71fb      	strb	r3, [r7, #7]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71bb      	strb	r3, [r7, #6]
	u8 status;	
   	NRF24L01_CSN=0;                 //ʹ��SPI����
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <NRF24L01_Write_Reg+0x3c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  	status =SPI1_ReadWriteByte(reg);//���ͼĴ����� 
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fab1 	bl	8003738 <SPI1_ReadWriteByte>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]
  	SPI1_ReadWriteByte(value);      //д��Ĵ�����ֵ
 80031da:	79bb      	ldrb	r3, [r7, #6]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 faab 	bl	8003738 <SPI1_ReadWriteByte>
  	NRF24L01_CSN=1;                 //��ֹSPI����	   
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <NRF24L01_Write_Reg+0x3c>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
  	return(status);       		    //����״ֵ̬
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	42418298 	.word	0x42418298

080031f8 <NRF24L01_2_Write_Reg>:
u8 NRF24L01_2_Write_Reg(u8 reg,u8 value)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	460a      	mov	r2, r1
 8003202:	71fb      	strb	r3, [r7, #7]
 8003204:	4613      	mov	r3, r2
 8003206:	71bb      	strb	r3, [r7, #6]
	u8 status;	
   	NRF24L01_2_CSN=0;                 //ʹ��SPI����
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <NRF24L01_2_Write_Reg+0x3c>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
  	status =SPI2_ReadWriteByte(reg);//���ͼĴ����� 
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 faa7 	bl	8003764 <SPI2_ReadWriteByte>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
  	SPI2_ReadWriteByte(value);      //д��Ĵ�����ֵ
 800321a:	79bb      	ldrb	r3, [r7, #6]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 faa1 	bl	8003764 <SPI2_ReadWriteByte>
  	NRF24L01_2_CSN=1;                 //��ֹSPI����	   
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <NRF24L01_2_Write_Reg+0x3c>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
  	return(status);       		    //����״ֵ̬
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	424182a4 	.word	0x424182a4

08003238 <NRF24L01_Read_Reg>:
//��ȡSPI�Ĵ���ֵ
//reg:Ҫ���ļĴ���
u8 NRF24L01_Read_Reg(u8 reg)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
	  u8 reg_val;	    
   	NRF24L01_CSN=0;             //ʹ��SPI����		
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <NRF24L01_Read_Reg+0x34>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
  	SPI1_ReadWriteByte(reg);    //���ͼĴ�����
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fa74 	bl	8003738 <SPI1_ReadWriteByte>
  	reg_val=SPI1_ReadWriteByte(0XFF);//��ȡ�Ĵ�������
 8003250:	20ff      	movs	r0, #255	; 0xff
 8003252:	f000 fa71 	bl	8003738 <SPI1_ReadWriteByte>
 8003256:	4603      	mov	r3, r0
 8003258:	73fb      	strb	r3, [r7, #15]
  	NRF24L01_CSN=1;             //��ֹSPI����		    
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <NRF24L01_Read_Reg+0x34>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]
  	return(reg_val);            //����״ֵ̬
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	42418298 	.word	0x42418298

08003270 <NRF24L01_2_Read_Reg>:
u8 NRF24L01_2_Read_Reg(u8 reg)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
	  u8 reg_val;	    
   	NRF24L01_2_CSN=0;             //ʹ��SPI����		
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <NRF24L01_2_Read_Reg+0x34>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
  	SPI2_ReadWriteByte(reg);    //���ͼĴ�����
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fa6e 	bl	8003764 <SPI2_ReadWriteByte>
  	reg_val=SPI2_ReadWriteByte(0XFF);//��ȡ�Ĵ�������
 8003288:	20ff      	movs	r0, #255	; 0xff
 800328a:	f000 fa6b 	bl	8003764 <SPI2_ReadWriteByte>
 800328e:	4603      	mov	r3, r0
 8003290:	73fb      	strb	r3, [r7, #15]
  	NRF24L01_2_CSN=1;             //��ֹSPI����		    
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <NRF24L01_2_Read_Reg+0x34>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
  	return(reg_val);            //����״ֵ̬
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	424182a4 	.word	0x424182a4

080032a8 <NRF24L01_Read_Buf>:
//reg:�Ĵ���(λ��)
//*pBuf:����ָ��
//len:���ݳ���
//����ֵ,�˴ζ�����״̬�Ĵ���ֵ 
u8 NRF24L01_Read_Buf(u8 reg,u8 *pBuf,u8 len)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;	       
  	NRF24L01_CSN=0;            //ʹ��SPI����
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <NRF24L01_Read_Buf+0x58>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
  	status=SPI1_ReadWriteByte(reg);//���ͼĴ���ֵ(λ��),����ȡ״ֵ̬   	   
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fa39 	bl	8003738 <SPI1_ReadWriteByte>
 80032c6:	4603      	mov	r3, r0
 80032c8:	73bb      	strb	r3, [r7, #14]
	for(u8_ctr=0;u8_ctr<len;u8_ctr++)pBuf[u8_ctr]=SPI1_ReadWriteByte(0XFF);//��������
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e00a      	b.n	80032e6 <NRF24L01_Read_Buf+0x3e>
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	18d4      	adds	r4, r2, r3
 80032d6:	20ff      	movs	r0, #255	; 0xff
 80032d8:	f000 fa2e 	bl	8003738 <SPI1_ReadWriteByte>
 80032dc:	4603      	mov	r3, r0
 80032de:	7023      	strb	r3, [r4, #0]
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	3301      	adds	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	79bb      	ldrb	r3, [r7, #6]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d3f0      	bcc.n	80032d0 <NRF24L01_Read_Buf+0x28>
  	NRF24L01_CSN=1;            //�ر�SPI����
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <NRF24L01_Read_Buf+0x58>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
  	return status;             //���ض�����״ֵ̬
 80032f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}
 80032fe:	bf00      	nop
 8003300:	42418298 	.word	0x42418298

08003304 <NRF24L01_2_Read_Buf>:
u8 NRF24L01_2_Read_Buf(u8 reg,u8 *pBuf,u8 len)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
 8003310:	4613      	mov	r3, r2
 8003312:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;	       
  	NRF24L01_2_CSN=0;            //ʹ��SPI����
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <NRF24L01_2_Read_Buf+0x58>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
  	status=SPI2_ReadWriteByte(reg);//���ͼĴ���ֵ(λ��),����ȡ״ֵ̬   	   
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fa21 	bl	8003764 <SPI2_ReadWriteByte>
 8003322:	4603      	mov	r3, r0
 8003324:	73bb      	strb	r3, [r7, #14]
	for(u8_ctr=0;u8_ctr<len;u8_ctr++)pBuf[u8_ctr]=SPI2_ReadWriteByte(0XFF);//��������
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e00a      	b.n	8003342 <NRF24L01_2_Read_Buf+0x3e>
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	18d4      	adds	r4, r2, r3
 8003332:	20ff      	movs	r0, #255	; 0xff
 8003334:	f000 fa16 	bl	8003764 <SPI2_ReadWriteByte>
 8003338:	4603      	mov	r3, r0
 800333a:	7023      	strb	r3, [r4, #0]
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	3301      	adds	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	79bb      	ldrb	r3, [r7, #6]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3f0      	bcc.n	800332c <NRF24L01_2_Read_Buf+0x28>
  	NRF24L01_2_CSN=1;            //�ر�SPI����
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <NRF24L01_2_Read_Buf+0x58>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  	return status;             //���ض�����״ֵ̬
 8003350:	7bbb      	ldrb	r3, [r7, #14]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}
 800335a:	bf00      	nop
 800335c:	424182a4 	.word	0x424182a4

08003360 <NRF24L01_Write_Buf>:
//reg:�Ĵ���(λ��)
//*pBuf:����ָ��
//len:���ݳ���
//����ֵ,�˴ζ�����״̬�Ĵ���ֵ
u8 NRF24L01_Write_Buf(u8 reg, u8 *pBuf, u8 len)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	71fb      	strb	r3, [r7, #7]
 800336c:	4613      	mov	r3, r2
 800336e:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;	    
	NRF24L01_CSN=0;             //ʹ��SPI����
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <NRF24L01_Write_Buf+0x54>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
  	status = SPI1_ReadWriteByte(reg);//���ͼĴ���ֵ(λ��),����ȡ״ֵ̬
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f9dd 	bl	8003738 <SPI1_ReadWriteByte>
 800337e:	4603      	mov	r3, r0
 8003380:	73bb      	strb	r3, [r7, #14]
  	for(u8_ctr=0; u8_ctr<len; u8_ctr++)SPI1_ReadWriteByte(*pBuf++); //д������	 
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e009      	b.n	800339c <NRF24L01_Write_Buf+0x3c>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	603a      	str	r2, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f9d1 	bl	8003738 <SPI1_ReadWriteByte>
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	3301      	adds	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	79bb      	ldrb	r3, [r7, #6]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3f1      	bcc.n	8003388 <NRF24L01_Write_Buf+0x28>
  	NRF24L01_CSN=1;             //�ر�SPI����
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <NRF24L01_Write_Buf+0x54>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  	return status;              //���ض�����״ֵ̬
 80033aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	42418298 	.word	0x42418298

080033b8 <NRF24L01_2_Write_Buf>:
u8 NRF24L01_2_Write_Buf(u8 reg, u8 *pBuf, u8 len)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;	    
	NRF24L01_2_CSN=0;             //ʹ��SPI����
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <NRF24L01_2_Write_Buf+0x54>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
  	status = SPI2_ReadWriteByte(reg);//���ͼĴ���ֵ(λ��),����ȡ״ֵ̬
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f9c7 	bl	8003764 <SPI2_ReadWriteByte>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73bb      	strb	r3, [r7, #14]
  	for(u8_ctr=0; u8_ctr<len; u8_ctr++)SPI2_ReadWriteByte(*pBuf++); //д������	 
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	e009      	b.n	80033f4 <NRF24L01_2_Write_Buf+0x3c>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	603a      	str	r2, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f9bb 	bl	8003764 <SPI2_ReadWriteByte>
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	3301      	adds	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	79bb      	ldrb	r3, [r7, #6]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3f1      	bcc.n	80033e0 <NRF24L01_2_Write_Buf+0x28>
  	NRF24L01_2_CSN=1;             //�ر�SPI����
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <NRF24L01_2_Write_Buf+0x54>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]
  	return status;              //���ض�����״ֵ̬
 8003402:	7bbb      	ldrb	r3, [r7, #14]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	424182a4 	.word	0x424182a4

08003410 <NRF24L01_2_TxPacket>:
		return TX_OK;
	}
	return 0xff;//����ԭ����ʧ��
}
u8 NRF24L01_2_TxPacket(u8 *txbuf)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	u8 sta;
 	SPI2_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi�ٶ�Ϊ6.75Mhz��24L01�����SPIʱ��Ϊ10Mhz��   
 8003418:	2010      	movs	r0, #16
 800341a:	f000 f95f 	bl	80036dc <SPI2_SetSpeed>
	NRF24L01_2_CE=0;
 800341e:	4b18      	ldr	r3, [pc, #96]	; (8003480 <NRF24L01_2_TxPacket+0x70>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
  	NRF24L01_2_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//д���ݵ�TX BUF  32���ֽ�
 8003424:	2220      	movs	r2, #32
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	20a0      	movs	r0, #160	; 0xa0
 800342a:	f7ff ffc5 	bl	80033b8 <NRF24L01_2_Write_Buf>
 	NRF24L01_2_CE=1;                         //��������	   
 800342e:	4b14      	ldr	r3, [pc, #80]	; (8003480 <NRF24L01_2_TxPacket+0x70>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]
	while(NRF24L01_2_IRQ!=0);                 //�ȴ��������
 8003434:	bf00      	nop
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <NRF24L01_2_TxPacket+0x74>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1fb      	bne.n	8003436 <NRF24L01_2_TxPacket+0x26>
	sta=NRF24L01_2_Read_Reg(STATUS);          //��ȡ״̬�Ĵ�����ֵ	   
 800343e:	2007      	movs	r0, #7
 8003440:	f7ff ff16 	bl	8003270 <NRF24L01_2_Read_Reg>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]
	NRF24L01_2_Write_Reg(NRF_WRITE_REG+STATUS,sta); //���TX_DS��MAX_RT�жϱ�־
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	4619      	mov	r1, r3
 800344c:	2027      	movs	r0, #39	; 0x27
 800344e:	f7ff fed3 	bl	80031f8 <NRF24L01_2_Write_Reg>
	if(sta&MAX_TX)                          //�ﵽ����ط�����
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <NRF24L01_2_TxPacket+0x58>
	{
		NRF24L01_2_Write_Reg(FLUSH_TX,0xff);  //���TX FIFO�Ĵ��� 
 800345c:	21ff      	movs	r1, #255	; 0xff
 800345e:	20e1      	movs	r0, #225	; 0xe1
 8003460:	f7ff feca 	bl	80031f8 <NRF24L01_2_Write_Reg>
		return MAX_TX; 
 8003464:	2310      	movs	r3, #16
 8003466:	e007      	b.n	8003478 <NRF24L01_2_TxPacket+0x68>
	}
	if(sta&TX_OK)                           //�������
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <NRF24L01_2_TxPacket+0x66>
	{
		return TX_OK;
 8003472:	2320      	movs	r3, #32
 8003474:	e000      	b.n	8003478 <NRF24L01_2_TxPacket+0x68>
	}
	return 0xff;//����ԭ����ʧ��
 8003476:	23ff      	movs	r3, #255	; 0xff
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	424182a0 	.word	0x424182a0
 8003484:	42418228 	.word	0x42418228

08003488 <NRF24L01_RxPacket>:
//����NRF24L01����һ������
//txbuf:�����������׵�ַ
//����ֵ:0��������ɣ��������������
u8 NRF24L01_RxPacket(u8 *rxbuf)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	u8 sta;		    							   
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi�ٶ�Ϊ6.75Mhz��24L01�����SPIʱ��Ϊ10Mhz��   
 8003490:	2010      	movs	r0, #16
 8003492:	f000 f8f5 	bl	8003680 <SPI1_SetSpeed>
	sta=NRF24L01_Read_Reg(STATUS);          //��ȡ״̬�Ĵ�����ֵ    	 
 8003496:	2007      	movs	r0, #7
 8003498:	f7ff fece 	bl	8003238 <NRF24L01_Read_Reg>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //���TX_DS��MAX_RT�жϱ�־
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	4619      	mov	r1, r3
 80034a4:	2027      	movs	r0, #39	; 0x27
 80034a6:	f7ff fe87 	bl	80031b8 <NRF24L01_Write_Reg>
	if(sta&RX_OK)//���յ�����
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//��ȡ����
 80034b4:	2220      	movs	r2, #32
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	2061      	movs	r0, #97	; 0x61
 80034ba:	f7ff fef5 	bl	80032a8 <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX,0xff);  //���RX FIFO�Ĵ��� 
 80034be:	21ff      	movs	r1, #255	; 0xff
 80034c0:	20e2      	movs	r0, #226	; 0xe2
 80034c2:	f7ff fe79 	bl	80031b8 <NRF24L01_Write_Reg>
		return 0; 
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <NRF24L01_RxPacket+0x44>
	}	   
	return 1;//û�յ��κ�����
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <NRF24L01_RX_Mode>:
}
//�ú�����ʼ��NRF24L01��RXģʽ
//����RX��ַ,дRX���ݿ��,ѡ��RFƵ��,�����ʺ�LNA HCURR
//��CE��ߺ�,������RXģʽ,�����Խ���������		   
void NRF24L01_RX_Mode(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
	NRF24L01_CE=0;	  
 80034d8:	4b12      	ldr	r3, [pc, #72]	; (8003524 <NRF24L01_RX_Mode+0x50>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  	NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH);//дRX�ڵ��ַ
 80034de:	2205      	movs	r2, #5
 80034e0:	4911      	ldr	r1, [pc, #68]	; (8003528 <NRF24L01_RX_Mode+0x54>)
 80034e2:	202a      	movs	r0, #42	; 0x2a
 80034e4:	f7ff ff3c 	bl	8003360 <NRF24L01_Write_Buf>
	  
  	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);       //ʹ��ͨ��0���Զ�Ӧ��    
 80034e8:	2101      	movs	r1, #1
 80034ea:	2021      	movs	r0, #33	; 0x21
 80034ec:	f7ff fe64 	bl	80031b8 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);   //ʹ��ͨ��0�Ľ��յ�ַ  	 
 80034f0:	2101      	movs	r1, #1
 80034f2:	2022      	movs	r0, #34	; 0x22
 80034f4:	f7ff fe60 	bl	80031b8 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);	        //����RFͨ��Ƶ��		  
 80034f8:	2128      	movs	r1, #40	; 0x28
 80034fa:	2025      	movs	r0, #37	; 0x25
 80034fc:	f7ff fe5c 	bl	80031b8 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//ѡ��ͨ��0����Ч���ݿ�� 	    
 8003500:	2120      	movs	r1, #32
 8003502:	2031      	movs	r0, #49	; 0x31
 8003504:	f7ff fe58 	bl	80031b8 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);    //����TX�������,0db����,2Mbps,���������濪��   
 8003508:	210f      	movs	r1, #15
 800350a:	2026      	movs	r0, #38	; 0x26
 800350c:	f7ff fe54 	bl	80031b8 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0f);     //���û�������ģʽ�Ĳ���;PWR_UP,EN_CRC,16BIT_CRC,����ģʽ 
 8003510:	210f      	movs	r1, #15
 8003512:	2020      	movs	r0, #32
 8003514:	f7ff fe50 	bl	80031b8 <NRF24L01_Write_Reg>
  	NRF24L01_CE=1; //CEΪ��,�������ģʽ 
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <NRF24L01_RX_Mode+0x50>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	42418294 	.word	0x42418294
 8003528:	08003820 	.word	0x08003820

0800352c <NRF24L01_2_TX_Mode>:
	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //����TX�������,0db����,2Mbps,���������濪��   
	NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //���û�������ģʽ�Ĳ���;PWR_UP,EN_CRC,16BIT_CRC,����ģʽ,���������ж�
	NRF24L01_CE=1;//CEΪ��,10us����������
}
void NRF24L01_2_TX_Mode(void)
{														 
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	NRF24L01_2_CE=0;	    
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <NRF24L01_2_TX_Mode+0x58>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
	NRF24L01_2_Write_Buf(NRF_WRITE_REG+TX_ADDR,(u8*)TX_ADDRESS,TX_ADR_WIDTH);//дTX�ڵ��ַ 
 8003536:	2205      	movs	r2, #5
 8003538:	4913      	ldr	r1, [pc, #76]	; (8003588 <NRF24L01_2_TX_Mode+0x5c>)
 800353a:	2030      	movs	r0, #48	; 0x30
 800353c:	f7ff ff3c 	bl	80033b8 <NRF24L01_2_Write_Buf>
	NRF24L01_2_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH); //����TX�ڵ��ַ,��ҪΪ��ʹ��ACK	  
 8003540:	2205      	movs	r2, #5
 8003542:	4912      	ldr	r1, [pc, #72]	; (800358c <NRF24L01_2_TX_Mode+0x60>)
 8003544:	202a      	movs	r0, #42	; 0x2a
 8003546:	f7ff ff37 	bl	80033b8 <NRF24L01_2_Write_Buf>

	NRF24L01_2_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //ʹ��ͨ��0���Զ�Ӧ��    
 800354a:	2101      	movs	r1, #1
 800354c:	2021      	movs	r0, #33	; 0x21
 800354e:	f7ff fe53 	bl	80031f8 <NRF24L01_2_Write_Reg>
	NRF24L01_2_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //ʹ��ͨ��0�Ľ��յ�ַ  
 8003552:	2101      	movs	r1, #1
 8003554:	2022      	movs	r0, #34	; 0x22
 8003556:	f7ff fe4f 	bl	80031f8 <NRF24L01_2_Write_Reg>
	NRF24L01_2_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0x1a);//�����Զ��ط����ʱ��:500us + 86us;����Զ��ط�����:10��
 800355a:	211a      	movs	r1, #26
 800355c:	2024      	movs	r0, #36	; 0x24
 800355e:	f7ff fe4b 	bl	80031f8 <NRF24L01_2_Write_Reg>
	NRF24L01_2_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //����RFͨ��Ϊ40
 8003562:	2128      	movs	r1, #40	; 0x28
 8003564:	2025      	movs	r0, #37	; 0x25
 8003566:	f7ff fe47 	bl	80031f8 <NRF24L01_2_Write_Reg>
	NRF24L01_2_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //����TX�������,0db����,2Mbps,���������濪��   
 800356a:	210f      	movs	r1, #15
 800356c:	2026      	movs	r0, #38	; 0x26
 800356e:	f7ff fe43 	bl	80031f8 <NRF24L01_2_Write_Reg>
	NRF24L01_2_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //���û�������ģʽ�Ĳ���;PWR_UP,EN_CRC,16BIT_CRC,����ģʽ,���������ж�
 8003572:	210e      	movs	r1, #14
 8003574:	2020      	movs	r0, #32
 8003576:	f7ff fe3f 	bl	80031f8 <NRF24L01_2_Write_Reg>
	NRF24L01_2_CE=1;//CEΪ��,10us����������
 800357a:	4b02      	ldr	r3, [pc, #8]	; (8003584 <NRF24L01_2_TX_Mode+0x58>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	424182a0 	.word	0x424182a0
 8003588:	08003818 	.word	0x08003818
 800358c:	08003820 	.word	0x08003820

08003590 <SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef SPI1_Handler;  
SPI_HandleTypeDef SPI2_Handler;  
void SPI1_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
    SPI1_Handler.Instance=SPI1;                         //SPI1
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <SPI1_Init+0x70>)
 8003596:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <SPI1_Init+0x74>)
 8003598:	601a      	str	r2, [r3, #0]
    SPI1_Handler.Init.Mode=SPI_MODE_MASTER;             //����SPI����ģʽ������Ϊ��ģʽ
 800359a:	4b19      	ldr	r3, [pc, #100]	; (8003600 <SPI1_Init+0x70>)
 800359c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035a0:	605a      	str	r2, [r3, #4]
    SPI1_Handler.Init.Direction=SPI_DIRECTION_2LINES;   //����SPI�������˫�������ģʽ:SPI����Ϊ˫��ģʽ
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <SPI1_Init+0x70>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
    SPI1_Handler.Init.DataSize=SPI_DATASIZE_8BIT;       //����SPI�����ݴ�С:SPI���ͽ���8λ֡�ṹ
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <SPI1_Init+0x70>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
    SPI1_Handler.Init.CLKPolarity=SPI_POLARITY_HIGH;    //����ͬ��ʱ�ӵĿ���״̬Ϊ�ߵ�ƽ
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <SPI1_Init+0x70>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	611a      	str	r2, [r3, #16]
    SPI1_Handler.Init.CLKPhase=SPI_PHASE_2EDGE;         //����ͬ��ʱ�ӵĵڶ��������أ��������½������ݱ�����
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <SPI1_Init+0x70>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
    SPI1_Handler.Init.NSS=SPI_NSS_SOFT;                 //NSS�ź���Ӳ����NSS�ܽţ����������ʹ��SSIλ������:�ڲ�NSS�ź���SSIλ����
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <SPI1_Init+0x70>)
 80035bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c0:	619a      	str	r2, [r3, #24]
    SPI1_Handler.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_256;//���岨����Ԥ��Ƶ��ֵ:������Ԥ��ƵֵΪ256
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <SPI1_Init+0x70>)
 80035c4:	2238      	movs	r2, #56	; 0x38
 80035c6:	61da      	str	r2, [r3, #28]
    SPI1_Handler.Init.FirstBit=SPI_FIRSTBIT_MSB;        //ָ�����ݴ����MSBλ����LSBλ��ʼ:���ݴ����MSBλ��ʼ
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <SPI1_Init+0x70>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    SPI1_Handler.Init.TIMode=SPI_TIMODE_DISABLE;        //�ر�TIģʽ
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <SPI1_Init+0x70>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
    SPI1_Handler.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;//�ر�Ӳ��CRCУ��
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <SPI1_Init+0x70>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
    SPI1_Handler.Init.CRCPolynomial=7;                  //CRCֵ����Ķ���ʽ
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <SPI1_Init+0x70>)
 80035dc:	2207      	movs	r2, #7
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&SPI1_Handler);//��ʼ��
 80035e0:	4807      	ldr	r0, [pc, #28]	; (8003600 <SPI1_Init+0x70>)
 80035e2:	f7fe ff6f 	bl	80024c4 <HAL_SPI_Init>
    
    __HAL_SPI_ENABLE(&SPI1_Handler);                    //ʹ��SPI1
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <SPI1_Init+0x70>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <SPI1_Init+0x70>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f4:	601a      	str	r2, [r3, #0]
	
    SPI1_ReadWriteByte(0Xff);                           //��������
 80035f6:	20ff      	movs	r0, #255	; 0xff
 80035f8:	f000 f89e 	bl	8003738 <SPI1_ReadWriteByte>
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000240 	.word	0x20000240
 8003604:	40013000 	.word	0x40013000

08003608 <SPI2_Init>:
void SPI2_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
    SPI2_Handler.Instance=SPI2;                         //SPI1
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <SPI2_Init+0x70>)
 800360e:	4a1b      	ldr	r2, [pc, #108]	; (800367c <SPI2_Init+0x74>)
 8003610:	601a      	str	r2, [r3, #0]
    SPI2_Handler.Init.Mode=SPI_MODE_MASTER;             //����SPI����ģʽ������Ϊ��ģʽ
 8003612:	4b19      	ldr	r3, [pc, #100]	; (8003678 <SPI2_Init+0x70>)
 8003614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003618:	605a      	str	r2, [r3, #4]
    SPI2_Handler.Init.Direction=SPI_DIRECTION_2LINES;   //����SPI�������˫�������ģʽ:SPI����Ϊ˫��ģʽ
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <SPI2_Init+0x70>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
    SPI2_Handler.Init.DataSize=SPI_DATASIZE_8BIT;       //����SPI�����ݴ�С:SPI���ͽ���8λ֡�ṹ
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <SPI2_Init+0x70>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
    SPI2_Handler.Init.CLKPolarity=SPI_POLARITY_HIGH;    //����ͬ��ʱ�ӵĿ���״̬Ϊ�ߵ�ƽ
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <SPI2_Init+0x70>)
 8003628:	2202      	movs	r2, #2
 800362a:	611a      	str	r2, [r3, #16]
    SPI2_Handler.Init.CLKPhase=SPI_PHASE_2EDGE;         //����ͬ��ʱ�ӵĵڶ��������أ��������½������ݱ�����
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <SPI2_Init+0x70>)
 800362e:	2201      	movs	r2, #1
 8003630:	615a      	str	r2, [r3, #20]
    SPI2_Handler.Init.NSS=SPI_NSS_SOFT;                 //NSS�ź���Ӳ����NSS�ܽţ����������ʹ��SSIλ������:�ڲ�NSS�ź���SSIλ����
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <SPI2_Init+0x70>)
 8003634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003638:	619a      	str	r2, [r3, #24]
    SPI2_Handler.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_256;//���岨����Ԥ��Ƶ��ֵ:������Ԥ��ƵֵΪ256
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <SPI2_Init+0x70>)
 800363c:	2238      	movs	r2, #56	; 0x38
 800363e:	61da      	str	r2, [r3, #28]
    SPI2_Handler.Init.FirstBit=SPI_FIRSTBIT_MSB;        //ָ�����ݴ����MSBλ����LSBλ��ʼ:���ݴ����MSBλ��ʼ
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <SPI2_Init+0x70>)
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
    SPI2_Handler.Init.TIMode=SPI_TIMODE_DISABLE;        //�ر�TIģʽ
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <SPI2_Init+0x70>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
    SPI2_Handler.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;//�ر�Ӳ��CRCУ��
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <SPI2_Init+0x70>)
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
    SPI2_Handler.Init.CRCPolynomial=7;                  //CRCֵ����Ķ���ʽ
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <SPI2_Init+0x70>)
 8003654:	2207      	movs	r2, #7
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&SPI2_Handler);//��ʼ��
 8003658:	4807      	ldr	r0, [pc, #28]	; (8003678 <SPI2_Init+0x70>)
 800365a:	f7fe ff33 	bl	80024c4 <HAL_SPI_Init>
    
    __HAL_SPI_ENABLE(&SPI2_Handler);                    //ʹ��SPI1
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <SPI2_Init+0x70>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <SPI2_Init+0x70>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366c:	601a      	str	r2, [r3, #0]
	
    SPI2_ReadWriteByte(0Xff);                           //��������
 800366e:	20ff      	movs	r0, #255	; 0xff
 8003670:	f000 f878 	bl	8003764 <SPI2_ReadWriteByte>
}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200001e8 	.word	0x200001e8
 800367c:	40003800 	.word	0x40003800

08003680 <SPI1_SetSpeed>:
//    HAL_GPIO_Init(GPIOB,&GPIO_Initure);
//}


void SPI1_SetSpeed(u8 SPI_BaudRatePrescaler)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//�ж���Ч��
    __HAL_SPI_DISABLE(&SPI1_Handler);            //�ر�SPI
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <SPI1_SetSpeed+0x58>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <SPI1_SetSpeed+0x58>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003698:	601a      	str	r2, [r3, #0]
    SPI1_Handler.Instance->CR1&=0XFFC7;          //λ3-5���㣬�������ò�����
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <SPI1_SetSpeed+0x58>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <SPI1_SetSpeed+0x58>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80036a8:	400b      	ands	r3, r1
 80036aa:	6013      	str	r3, [r2, #0]
    SPI1_Handler.Instance->CR1|=SPI_BaudRatePrescaler;//����SPI�ٶ�
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <SPI1_SetSpeed+0x58>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	79fa      	ldrb	r2, [r7, #7]
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <SPI1_SetSpeed+0x58>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&SPI1_Handler);             //ʹ��SPI
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <SPI1_SetSpeed+0x58>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <SPI1_SetSpeed+0x58>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]
    
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	20000240 	.word	0x20000240

080036dc <SPI2_SetSpeed>:

void SPI2_SetSpeed(u8 SPI_BaudRatePrescaler)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//�ж���Ч��
    __HAL_SPI_DISABLE(&SPI2_Handler);            //�ر�SPI
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <SPI2_SetSpeed+0x58>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <SPI2_SetSpeed+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f4:	601a      	str	r2, [r3, #0]
    SPI2_Handler.Instance->CR1&=0XFFC7;          //λ3-5���㣬�������ò�����
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <SPI2_SetSpeed+0x58>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <SPI2_SetSpeed+0x58>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8003704:	400b      	ands	r3, r1
 8003706:	6013      	str	r3, [r2, #0]
    SPI2_Handler.Instance->CR1|=SPI_BaudRatePrescaler;//����SPI�ٶ�
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <SPI2_SetSpeed+0x58>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <SPI2_SetSpeed+0x58>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&SPI2_Handler);             //ʹ��SPI
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <SPI2_SetSpeed+0x58>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <SPI2_SetSpeed+0x58>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003726:	601a      	str	r2, [r3, #0]
    
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	200001e8 	.word	0x200001e8

08003738 <SPI1_ReadWriteByte>:

u8 SPI1_ReadWriteByte(u8 TxData)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af02      	add	r7, sp, #8
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    HAL_SPI_TransmitReceive(&SPI1_Handler,&TxData,&Rxdata,1, 1000);       
 8003742:	f107 020f 	add.w	r2, r7, #15
 8003746:	1df9      	adds	r1, r7, #7
 8003748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2301      	movs	r3, #1
 8003750:	4803      	ldr	r0, [pc, #12]	; (8003760 <SPI1_ReadWriteByte+0x28>)
 8003752:	f7fe ff40 	bl	80025d6 <HAL_SPI_TransmitReceive>
 	return Rxdata;          		    //�����յ�������		
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000240 	.word	0x20000240

08003764 <SPI2_ReadWriteByte>:
u8 SPI2_ReadWriteByte(u8 TxData)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    HAL_SPI_TransmitReceive(&SPI2_Handler,&TxData,&Rxdata,1, 1000);       
 800376e:	f107 020f 	add.w	r2, r7, #15
 8003772:	1df9      	adds	r1, r7, #7
 8003774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2301      	movs	r3, #1
 800377c:	4803      	ldr	r0, [pc, #12]	; (800378c <SPI2_ReadWriteByte+0x28>)
 800377e:	f7fe ff2a 	bl	80025d6 <HAL_SPI_TransmitReceive>
 	return Rxdata;          		   		
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200001e8 	.word	0x200001e8

08003790 <__libc_init_array>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	4d0d      	ldr	r5, [pc, #52]	; (80037c8 <__libc_init_array+0x38>)
 8003794:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <__libc_init_array+0x3c>)
 8003796:	1b64      	subs	r4, r4, r5
 8003798:	10a4      	asrs	r4, r4, #2
 800379a:	2600      	movs	r6, #0
 800379c:	42a6      	cmp	r6, r4
 800379e:	d109      	bne.n	80037b4 <__libc_init_array+0x24>
 80037a0:	4d0b      	ldr	r5, [pc, #44]	; (80037d0 <__libc_init_array+0x40>)
 80037a2:	4c0c      	ldr	r4, [pc, #48]	; (80037d4 <__libc_init_array+0x44>)
 80037a4:	f000 f820 	bl	80037e8 <_init>
 80037a8:	1b64      	subs	r4, r4, r5
 80037aa:	10a4      	asrs	r4, r4, #2
 80037ac:	2600      	movs	r6, #0
 80037ae:	42a6      	cmp	r6, r4
 80037b0:	d105      	bne.n	80037be <__libc_init_array+0x2e>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b8:	4798      	blx	r3
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7ee      	b.n	800379c <__libc_init_array+0xc>
 80037be:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c2:	4798      	blx	r3
 80037c4:	3601      	adds	r6, #1
 80037c6:	e7f2      	b.n	80037ae <__libc_init_array+0x1e>
 80037c8:	08003830 	.word	0x08003830
 80037cc:	08003830 	.word	0x08003830
 80037d0:	08003830 	.word	0x08003830
 80037d4:	08003834 	.word	0x08003834

080037d8 <memset>:
 80037d8:	4402      	add	r2, r0
 80037da:	4603      	mov	r3, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	d100      	bne.n	80037e2 <memset+0xa>
 80037e0:	4770      	bx	lr
 80037e2:	f803 1b01 	strb.w	r1, [r3], #1
 80037e6:	e7f9      	b.n	80037dc <memset+0x4>

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
